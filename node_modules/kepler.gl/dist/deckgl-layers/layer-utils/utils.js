"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBinColorDomain = getBinColorDomain;
exports.getScaleFunctor = getScaleFunctor;
exports.getColorValueDomain = getColorValueDomain;
exports.getColorScaleFunction = getColorScaleFunction;
exports.getElevationScaleFunction = getElevationScaleFunction;
exports.getRadiusScaleFunction = getRadiusScaleFunction;
exports.needsRecalculateColorDomain = needsRecalculateColorDomain;
exports.needReCalculateScaleFunction = needReCalculateScaleFunction;
exports.needsRecalculateRadiusRange = needsRecalculateRadiusRange;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _dataUtils = require("../../utils/data-utils");

var _defaultSettings = require("../../constants/default-settings");

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// Enable render color by customized color Scale
function getBinColorDomain(scaleType, bins, _ref) {
  var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
      lowerIdx = _ref2[0],
      upperIdx = _ref2[1];

  switch (scaleType) {
    case _defaultSettings.SCALE_TYPES.quantize:
      return [bins[lowerIdx].value, bins[upperIdx].value];

    case _defaultSettings.SCALE_TYPES.quantile:
      return bins.slice(lowerIdx, upperIdx + 1).map(function (d) {
        return d.value;
      });

    case _defaultSettings.SCALE_TYPES.ordinal:
      return (0, _dataUtils.unique)(bins.map(function (b) {
        return b.value;
      })).sort();

    default:
      return [bins[lowerIdx].value, bins[upperIdx].value];
  }
}

function getScaleFunctor(scaleType) {
  return _defaultSettings.SCALE_FUNC[scaleType] || _defaultSettings.SCALE_FUNC.quantile;
}

function getColorValueDomain(layer) {
  var _layer$props = layer.props,
      lowerPercentile = _layer$props.lowerPercentile,
      upperPercentile = _layer$props.upperPercentile,
      colorScale = _layer$props.colorScale;
  var sortedBins = layer.state.sortedColorBins.sortedBins;
  var len = sortedBins.length;

  if (!len) {
    // err... what do we do
    layer.state.colorValueDomain = null;
  } else {
    var lowerIdx = Math.ceil(lowerPercentile / 100 * (len - 1));
    var upperIdx = Math.floor(upperPercentile / 100 * (len - 1)); // calculate valueDomain based on

    layer.state.colorValueDomain = getBinColorDomain(colorScale, sortedBins, [lowerIdx, upperIdx]);
    layer.getColorScale();
  }

  layer.props.onSetColorDomain(layer.state.colorValueDomain);
}

function getColorScaleFunction(layer) {
  var _layer$props2 = layer.props,
      colorScale = _layer$props2.colorScale,
      colorDomain = _layer$props2.colorDomain;
  layer.state.colorScaleFunc = getScaleFunctor(colorScale)().domain(colorDomain || layer.state.colorDomain || layer.state.colorValueDomain).range(layer.props.colorRange);
}

function getElevationScaleFunction(layer) {
  var elevationRange = layer.props.elevationRange;
  var elevationDomain = layer.props.elevationDomain || layer.state.elevationValueDomain;
  layer.state.elevationScaleFunc = getScaleFunctor(layer.props.sizeScale)().domain(elevationDomain).range(elevationRange);
}

function getRadiusScaleFunction(layer) {
  var viewport = layer.context.viewport;
  layer.state.radiusScaleFunc = _defaultSettings.SCALE_FUNC.sqrt().domain(layer.state.radiusDomain).range(layer.props.radiusRange.map(function (d) {
    return d * viewport.distanceScales.metersPerPixel[0];
  }));
}

function needsRecalculateColorDomain(oldProps, props) {
  return oldProps.lowerPercentile !== props.lowerPercentile || oldProps.upperPercentile !== props.upperPercentile || oldProps.colorScale !== props.colorScale;
}

function needReCalculateScaleFunction(oldProps, props) {
  return oldProps.colorRange !== props.colorRange;
}

function needsRecalculateRadiusRange(oldProps, props) {
  return oldProps.radiusRange !== props.radiusRange && (oldProps.radiusRange[0] !== props.radiusRange[0] || oldProps.radiusRange[1] !== props.radiusRange[1]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,