"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.propertiesV1 = exports.propertiesV0 = exports.customMapStylePropsV1 = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _versions = require("./versions");

var _schema = _interopRequireDefault(require("./schema"));

var _mapStyleSchema;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var customMapStylePropsV1 = {
  accessToken: null,
  custom: null,
  icon: null,
  id: null,
  label: null,
  url: null
};
exports.customMapStylePropsV1 = customMapStylePropsV1;
var CustomMapStyleSchema = new _schema["default"]({
  version: _versions.VERSIONS.v1,
  key: 'customStyle',
  properties: customMapStylePropsV1
});

var MapStyleSchemaV1 =
/*#__PURE__*/
function (_Schema) {
  (0, _inherits2["default"])(MapStyleSchemaV1, _Schema);

  function MapStyleSchemaV1() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, MapStyleSchemaV1);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(MapStyleSchemaV1)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "version", _versions.VERSIONS.v1);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "key", 'mapStyles');
    return _this;
  }

  (0, _createClass2["default"])(MapStyleSchemaV1, [{
    key: "save",
    value: function save(mapStyles) {
      // save all custom styles
      var saveCustomStyle = Object.keys(mapStyles).reduce(function (accu, key) {
        return _objectSpread({}, mapStyles[key].custom ? (0, _defineProperty2["default"])({}, key, CustomMapStyleSchema.save(mapStyles[key]).customStyle) : {});
      }, {});
      return (0, _defineProperty2["default"])({}, this.key, saveCustomStyle);
    }
  }, {
    key: "load",
    value: function load(mapStyles) {
      // If mapStyle is an empty object, do not load it
      return (0, _typeof2["default"])(mapStyles) === 'object' && Object.keys(mapStyles).length ? (0, _defineProperty2["default"])({}, this.key, mapStyles) : {};
    }
  }]);
  return MapStyleSchemaV1;
}(_schema["default"]); // version v0


var propertiesV0 = {
  styleType: null,
  topLayerGroups: null,
  visibleLayerGroups: null,
  buildingLayer: null,
  mapStyles: new MapStyleSchemaV1()
};
exports.propertiesV0 = propertiesV0;
var propertiesV1 = {
  styleType: null,
  topLayerGroups: null,
  visibleLayerGroups: null,
  threeDBuildingColor: null,
  mapStyles: new MapStyleSchemaV1()
};
exports.propertiesV1 = propertiesV1;
var mapStyleSchema = (_mapStyleSchema = {}, (0, _defineProperty2["default"])(_mapStyleSchema, _versions.VERSIONS.v0, new _schema["default"]({
  version: _versions.VERSIONS.v0,
  properties: propertiesV0,
  key: 'mapStyle'
})), (0, _defineProperty2["default"])(_mapStyleSchema, _versions.VERSIONS.v1, new _schema["default"]({
  version: _versions.VERSIONS.v1,
  properties: propertiesV1,
  key: 'mapStyle'
})), _mapStyleSchema);
var _default = mapStyleSchema;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY2hlbWFzL21hcC1zdHlsZS1zY2hlbWEuanMiXSwibmFtZXMiOlsiY3VzdG9tTWFwU3R5bGVQcm9wc1YxIiwiYWNjZXNzVG9rZW4iLCJjdXN0b20iLCJpY29uIiwiaWQiLCJsYWJlbCIsInVybCIsIkN1c3RvbU1hcFN0eWxlU2NoZW1hIiwiU2NoZW1hIiwidmVyc2lvbiIsIlZFUlNJT05TIiwidjEiLCJrZXkiLCJwcm9wZXJ0aWVzIiwiTWFwU3R5bGVTY2hlbWFWMSIsIm1hcFN0eWxlcyIsInNhdmVDdXN0b21TdHlsZSIsIk9iamVjdCIsImtleXMiLCJyZWR1Y2UiLCJhY2N1Iiwic2F2ZSIsImN1c3RvbVN0eWxlIiwibGVuZ3RoIiwicHJvcGVydGllc1YwIiwic3R5bGVUeXBlIiwidG9wTGF5ZXJHcm91cHMiLCJ2aXNpYmxlTGF5ZXJHcm91cHMiLCJidWlsZGluZ0xheWVyIiwicHJvcGVydGllc1YxIiwidGhyZWVEQnVpbGRpbmdDb2xvciIsIm1hcFN0eWxlU2NoZW1hIiwidjAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7Ozs7Ozs7O0FBRU8sSUFBTUEscUJBQXFCLEdBQUc7QUFDbkNDLEVBQUFBLFdBQVcsRUFBRSxJQURzQjtBQUVuQ0MsRUFBQUEsTUFBTSxFQUFFLElBRjJCO0FBR25DQyxFQUFBQSxJQUFJLEVBQUUsSUFINkI7QUFJbkNDLEVBQUFBLEVBQUUsRUFBRSxJQUorQjtBQUtuQ0MsRUFBQUEsS0FBSyxFQUFFLElBTDRCO0FBTW5DQyxFQUFBQSxHQUFHLEVBQUU7QUFOOEIsQ0FBOUI7O0FBU1AsSUFBTUMsb0JBQW9CLEdBQUcsSUFBSUMsa0JBQUosQ0FBVztBQUN0Q0MsRUFBQUEsT0FBTyxFQUFFQyxtQkFBU0MsRUFEb0I7QUFFdENDLEVBQUFBLEdBQUcsRUFBRSxhQUZpQztBQUd0Q0MsRUFBQUEsVUFBVSxFQUFFYjtBQUgwQixDQUFYLENBQTdCOztJQU1NYyxnQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0dBQ01KLG1CQUFTQyxFOzRGQUNiLFc7Ozs7Ozt5QkFDREksUyxFQUFXO0FBQ2Q7QUFDQSxVQUFNQyxlQUFlLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxTQUFaLEVBQXVCSSxNQUF2QixDQUE4QixVQUFDQyxJQUFELEVBQU9SLEdBQVA7QUFBQSxpQ0FDaERHLFNBQVMsQ0FBQ0gsR0FBRCxDQUFULENBQWVWLE1BQWYsd0NBQ0VVLEdBREYsRUFDUUwsb0JBQW9CLENBQUNjLElBQXJCLENBQTBCTixTQUFTLENBQUNILEdBQUQsQ0FBbkMsRUFBMENVLFdBRGxELElBQ2lFLEVBRmpCO0FBQUEsT0FBOUIsRUFJcEIsRUFKb0IsQ0FBeEI7QUFNQSxrREFBUyxLQUFLVixHQUFkLEVBQW9CSSxlQUFwQjtBQUNEOzs7eUJBRUlELFMsRUFBVztBQUNkO0FBQ0EsYUFBTyx5QkFBT0EsU0FBUCxNQUFxQixRQUFyQixJQUFpQ0UsTUFBTSxDQUFDQyxJQUFQLENBQVlILFNBQVosRUFBdUJRLE1BQXhELHdDQUFtRSxLQUFLWCxHQUF4RSxFQUE4RUcsU0FBOUUsSUFBMkYsRUFBbEc7QUFDRDs7O0VBakI0QlAsa0IsR0FvQi9COzs7QUFDTyxJQUFNZ0IsWUFBWSxHQUFHO0FBQzFCQyxFQUFBQSxTQUFTLEVBQUUsSUFEZTtBQUUxQkMsRUFBQUEsY0FBYyxFQUFFLElBRlU7QUFHMUJDLEVBQUFBLGtCQUFrQixFQUFFLElBSE07QUFJMUJDLEVBQUFBLGFBQWEsRUFBRSxJQUpXO0FBSzFCYixFQUFBQSxTQUFTLEVBQUUsSUFBSUQsZ0JBQUo7QUFMZSxDQUFyQjs7QUFRQSxJQUFNZSxZQUFZLEdBQUc7QUFDMUJKLEVBQUFBLFNBQVMsRUFBRSxJQURlO0FBRTFCQyxFQUFBQSxjQUFjLEVBQUUsSUFGVTtBQUcxQkMsRUFBQUEsa0JBQWtCLEVBQUUsSUFITTtBQUkxQkcsRUFBQUEsbUJBQW1CLEVBQUUsSUFKSztBQUsxQmYsRUFBQUEsU0FBUyxFQUFFLElBQUlELGdCQUFKO0FBTGUsQ0FBckI7O0FBUVAsSUFBTWlCLGNBQWMsNEVBQ2pCckIsbUJBQVNzQixFQURRLEVBQ0gsSUFBSXhCLGtCQUFKLENBQVc7QUFDeEJDLEVBQUFBLE9BQU8sRUFBRUMsbUJBQVNzQixFQURNO0FBRXhCbkIsRUFBQUEsVUFBVSxFQUFFVyxZQUZZO0FBR3hCWixFQUFBQSxHQUFHLEVBQUU7QUFIbUIsQ0FBWCxDQURHLHFEQU1qQkYsbUJBQVNDLEVBTlEsRUFNSCxJQUFJSCxrQkFBSixDQUFXO0FBQ3hCQyxFQUFBQSxPQUFPLEVBQUVDLG1CQUFTQyxFQURNO0FBRXhCRSxFQUFBQSxVQUFVLEVBQUVnQixZQUZZO0FBR3hCakIsRUFBQUEsR0FBRyxFQUFFO0FBSG1CLENBQVgsQ0FORyxtQkFBcEI7ZUFhZW1CLGMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTkgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQge1ZFUlNJT05TfSBmcm9tICcuL3ZlcnNpb25zJztcbmltcG9ydCBTY2hlbWEgZnJvbSAnLi9zY2hlbWEnO1xuXG5leHBvcnQgY29uc3QgY3VzdG9tTWFwU3R5bGVQcm9wc1YxID0ge1xuICBhY2Nlc3NUb2tlbjogbnVsbCxcbiAgY3VzdG9tOiBudWxsLFxuICBpY29uOiBudWxsLFxuICBpZDogbnVsbCxcbiAgbGFiZWw6IG51bGwsXG4gIHVybDogbnVsbFxufTtcblxuY29uc3QgQ3VzdG9tTWFwU3R5bGVTY2hlbWEgPSBuZXcgU2NoZW1hKHtcbiAgdmVyc2lvbjogVkVSU0lPTlMudjEsXG4gIGtleTogJ2N1c3RvbVN0eWxlJyxcbiAgcHJvcGVydGllczogY3VzdG9tTWFwU3R5bGVQcm9wc1YxXG59KTtcblxuY2xhc3MgTWFwU3R5bGVTY2hlbWFWMSBleHRlbmRzIFNjaGVtYSB7XG4gIHZlcnNpb24gPSBWRVJTSU9OUy52MTtcbiAga2V5ID0gJ21hcFN0eWxlcyc7XG4gIHNhdmUobWFwU3R5bGVzKSB7XG4gICAgLy8gc2F2ZSBhbGwgY3VzdG9tIHN0eWxlc1xuICAgIGNvbnN0IHNhdmVDdXN0b21TdHlsZSA9IE9iamVjdC5rZXlzKG1hcFN0eWxlcykucmVkdWNlKChhY2N1LCBrZXkpID0+ICh7XG4gICAgICAuLi4obWFwU3R5bGVzW2tleV0uY3VzdG9tID9cbiAgICAgICAgICB7W2tleV06IEN1c3RvbU1hcFN0eWxlU2NoZW1hLnNhdmUobWFwU3R5bGVzW2tleV0pLmN1c3RvbVN0eWxlfSA6IHt9XG4gICAgICApXG4gICAgfSksIHt9KTtcblxuICAgIHJldHVybiB7W3RoaXMua2V5XTogc2F2ZUN1c3RvbVN0eWxlfTtcbiAgfVxuXG4gIGxvYWQobWFwU3R5bGVzKSB7XG4gICAgLy8gSWYgbWFwU3R5bGUgaXMgYW4gZW1wdHkgb2JqZWN0LCBkbyBub3QgbG9hZCBpdFxuICAgIHJldHVybiB0eXBlb2YgbWFwU3R5bGVzID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyhtYXBTdHlsZXMpLmxlbmd0aCA/IHtbdGhpcy5rZXldOiBtYXBTdHlsZXN9IDoge307XG4gIH1cbn1cblxuLy8gdmVyc2lvbiB2MFxuZXhwb3J0IGNvbnN0IHByb3BlcnRpZXNWMCA9IHtcbiAgc3R5bGVUeXBlOiBudWxsLFxuICB0b3BMYXllckdyb3VwczogbnVsbCxcbiAgdmlzaWJsZUxheWVyR3JvdXBzOiBudWxsLFxuICBidWlsZGluZ0xheWVyOiBudWxsLFxuICBtYXBTdHlsZXM6IG5ldyBNYXBTdHlsZVNjaGVtYVYxKClcbn07XG5cbmV4cG9ydCBjb25zdCBwcm9wZXJ0aWVzVjEgPSB7XG4gIHN0eWxlVHlwZTogbnVsbCxcbiAgdG9wTGF5ZXJHcm91cHM6IG51bGwsXG4gIHZpc2libGVMYXllckdyb3VwczogbnVsbCxcbiAgdGhyZWVEQnVpbGRpbmdDb2xvcjogbnVsbCxcbiAgbWFwU3R5bGVzOiBuZXcgTWFwU3R5bGVTY2hlbWFWMSgpXG59O1xuXG5jb25zdCBtYXBTdHlsZVNjaGVtYSA9IHtcbiAgW1ZFUlNJT05TLnYwXTogbmV3IFNjaGVtYSh7XG4gICAgdmVyc2lvbjogVkVSU0lPTlMudjAsXG4gICAgcHJvcGVydGllczogcHJvcGVydGllc1YwLFxuICAgIGtleTogJ21hcFN0eWxlJ1xuICB9KSxcbiAgW1ZFUlNJT05TLnYxXTogbmV3IFNjaGVtYSh7XG4gICAgdmVyc2lvbjogVkVSU0lPTlMudjEsXG4gICAgcHJvcGVydGllczogcHJvcGVydGllc1YxLFxuICAgIGtleTogJ21hcFN0eWxlJ1xuICB9KVxufTtcblxuZXhwb3J0IGRlZmF1bHQgbWFwU3R5bGVTY2hlbWE7XG4iXX0=