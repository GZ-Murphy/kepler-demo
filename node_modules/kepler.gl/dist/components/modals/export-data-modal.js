"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _defaultSettings = require("../../constants/default-settings");

var _icons = require("../common/icons");

var _styledComponents = require("../common/styled-components");

// Copyright (c) 2019 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
var propTypes = {
  datasets: _propTypes["default"].object.isRequired,
  selectedDataset: _propTypes["default"].string,
  dataType: _propTypes["default"].string.isRequired,
  filtered: _propTypes["default"].bool.isRequired,
  // callbacks
  onClose: _propTypes["default"].func.isRequired,
  onChangeExportSelectedDataset: _propTypes["default"].func.isRequired,
  onChangeExportDataType: _propTypes["default"].func.isRequired,
  onChangeExportFiltered: _propTypes["default"].func.isRequired
};

var getDataRowCount = function getDataRowCount(datasets, selectedDataset, filtered) {
  var selectedData = datasets[selectedDataset];

  if (!selectedData) {
    return "".concat(Object.keys(datasets).length, " Files ");
  }

  var allData = selectedData.allData,
      data = selectedData.data;
  var rowCount = filtered ? data.length : allData.length;
  return "".concat(rowCount.toLocaleString(), " Rows");
};

var ExportDataModal = function ExportDataModal(_ref) {
  var datasets = _ref.datasets,
      selectedDataset = _ref.selectedDataset,
      dataType = _ref.dataType,
      filtered = _ref.filtered,
      config = _ref.config,
      onChangeExportDataType = _ref.onChangeExportDataType,
      onChangeExportSelectedDataset = _ref.onChangeExportSelectedDataset,
      onChangeExportFiltered = _ref.onChangeExportFiltered;
  return _react["default"].createElement(_styledComponents.StyledModalContent, {
    className: "export-data-modal"
  }, _react["default"].createElement("div", null, _react["default"].createElement(_styledComponents.StyledExportSection, null, _react["default"].createElement("div", {
    className: "description"
  }, _react["default"].createElement("div", {
    className: "title"
  }, "Dataset"), _react["default"].createElement("div", {
    className: "subtitle"
  }, "Choose the datasets you want to export")), _react["default"].createElement("div", {
    className: "selection"
  }, _react["default"].createElement("select", {
    value: selectedDataset,
    onChange: function onChange(e) {
      return onChangeExportSelectedDataset(e.target.value);
    }
  }, ['All'].concat(Object.keys(datasets)).map(function (d) {
    return _react["default"].createElement("option", {
      key: d,
      value: d
    }, datasets[d] && datasets[d].label || d);
  })))), _react["default"].createElement(_styledComponents.StyledExportSection, null, _react["default"].createElement("div", {
    className: "description"
  }, _react["default"].createElement("div", {
    className: "title"
  }, "Data Type"), _react["default"].createElement("div", {
    className: "subtitle"
  }, "Choose the type of data you want to export")), _react["default"].createElement("div", {
    className: "selection"
  }, _defaultSettings.EXPORT_DATA_TYPE_OPTIONS.map(function (op) {
    return _react["default"].createElement(_styledComponents.StyledType, {
      key: op.id,
      selected: dataType === op.id,
      available: op.available,
      onClick: function onClick() {
        return op.available && onChangeExportDataType(op.id);
      }
    }, _react["default"].createElement(_icons.FileType, {
      ext: op.label,
      height: "80px",
      fontSize: "11px"
    }));
  }))), _react["default"].createElement(_styledComponents.StyledExportSection, null, _react["default"].createElement("div", {
    className: "description"
  }, _react["default"].createElement("div", {
    className: "title"
  }, "Filter Data"), _react["default"].createElement("div", {
    className: "subtitle"
  }, "You can choose exporting original data or filtered data")), _react["default"].createElement("div", {
    className: "selection"
  }, _react["default"].createElement(_styledComponents.StyledFilteredOption, {
    selected: !filtered,
    onClick: function onClick() {
      return onChangeExportFiltered(false);
    }
  }, _react["default"].createElement("div", {
    className: "filtered-title"
  }, "Unfiltered Data"), _react["default"].createElement("div", {
    className: "filtered-subtitle"
  }, getDataRowCount(datasets, selectedDataset, false))), _react["default"].createElement(_styledComponents.StyledFilteredOption, {
    selected: filtered,
    onClick: function onClick() {
      return onChangeExportFiltered(true);
    }
  }, _react["default"].createElement("div", {
    className: "filtered-title"
  }, "Filtered Data"), _react["default"].createElement("div", {
    className: "filtered-subtitle"
  }, getDataRowCount(datasets, selectedDataset, true)))))));
};

ExportDataModal.propTypes = propTypes;

var ExportDataModalFactory = function ExportDataModalFactory() {
  return ExportDataModal;
};

var _default = ExportDataModalFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,