"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _switch = _interopRequireDefault(require("./switch"));

var _utils = require("../../utils/utils");

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 12px;\n\n  .map-layer-selector__item {\n    margin: 12px 0;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var propTypes = {
  // Required
  layers: _propTypes["default"].arrayOf(_propTypes["default"].object).isRequired,
  onMapToggleLayer: _propTypes["default"].func.isRequired
};

var MapLayerSelect = _styledComponents["default"].div(_templateObject());

var MapLayerSelector = function MapLayerSelector(_ref) {
  var layers = _ref.layers,
      onMapToggleLayer = _ref.onMapToggleLayer;
  return _react["default"].createElement(MapLayerSelect, {
    className: "map-layer-selector"
  }, layers.map(function (layer, index) {
    return _react["default"].createElement("div", {
      key: layer.id,
      className: "map-layer-selector__item"
    }, _react["default"].createElement(_switch["default"], {
      checked: layer.isVisible,
      id: "".concat(layer.id, "-toggle-").concat((0, _utils.generateHashId)(4)),
      label: layer.name,
      onChange: function onChange(e) {
        e.preventDefault();
        onMapToggleLayer(layer.id);
      }
    }));
  }));
};

MapLayerSelector.propTypes = propTypes;
var _default = MapLayerSelector;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9tYXAtbGF5ZXItc2VsZWN0b3IuanMiXSwibmFtZXMiOlsicHJvcFR5cGVzIiwibGF5ZXJzIiwiUHJvcFR5cGVzIiwiYXJyYXlPZiIsIm9iamVjdCIsImlzUmVxdWlyZWQiLCJvbk1hcFRvZ2dsZUxheWVyIiwiZnVuYyIsIk1hcExheWVyU2VsZWN0Iiwic3R5bGVkIiwiZGl2IiwiTWFwTGF5ZXJTZWxlY3RvciIsIm1hcCIsImxheWVyIiwiaW5kZXgiLCJpZCIsImlzVmlzaWJsZSIsIm5hbWUiLCJlIiwicHJldmVudERlZmF1bHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBb0JBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxTQUFTLEdBQUc7QUFDaEI7QUFDQUMsRUFBQUEsTUFBTSxFQUFFQyxzQkFBVUMsT0FBVixDQUFrQkQsc0JBQVVFLE1BQTVCLEVBQW9DQyxVQUY1QjtBQUdoQkMsRUFBQUEsZ0JBQWdCLEVBQUVKLHNCQUFVSyxJQUFWLENBQWVGO0FBSGpCLENBQWxCOztBQU1BLElBQU1HLGNBQWMsR0FBR0MsNkJBQU9DLEdBQVYsbUJBQXBCOztBQVFBLElBQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUI7QUFBQSxNQUFFVixNQUFGLFFBQUVBLE1BQUY7QUFBQSxNQUFVSyxnQkFBVixRQUFVQSxnQkFBVjtBQUFBLFNBQ3ZCLGdDQUFDLGNBQUQ7QUFBZ0IsSUFBQSxTQUFTLEVBQUM7QUFBMUIsS0FDR0wsTUFBTSxDQUFDVyxHQUFQLENBQVcsVUFBQ0MsS0FBRCxFQUFRQyxLQUFSO0FBQUEsV0FDVjtBQUFLLE1BQUEsR0FBRyxFQUFFRCxLQUFLLENBQUNFLEVBQWhCO0FBQW9CLE1BQUEsU0FBUyxFQUFDO0FBQTlCLE9BQ0UsZ0NBQUMsa0JBQUQ7QUFDRSxNQUFBLE9BQU8sRUFBRUYsS0FBSyxDQUFDRyxTQURqQjtBQUVFLE1BQUEsRUFBRSxZQUFLSCxLQUFLLENBQUNFLEVBQVgscUJBQXdCLDJCQUFlLENBQWYsQ0FBeEIsQ0FGSjtBQUdFLE1BQUEsS0FBSyxFQUFFRixLQUFLLENBQUNJLElBSGY7QUFJRSxNQUFBLFFBQVEsRUFBRSxrQkFBQUMsQ0FBQyxFQUFJO0FBQ2JBLFFBQUFBLENBQUMsQ0FBQ0MsY0FBRjtBQUNBYixRQUFBQSxnQkFBZ0IsQ0FBQ08sS0FBSyxDQUFDRSxFQUFQLENBQWhCO0FBQ0Q7QUFQSCxNQURGLENBRFU7QUFBQSxHQUFYLENBREgsQ0FEdUI7QUFBQSxDQUF6Qjs7QUFrQkFKLGdCQUFnQixDQUFDWCxTQUFqQixHQUE2QkEsU0FBN0I7ZUFFZVcsZ0IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTkgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IFN3aXRjaCBmcm9tICdjb21wb25lbnRzL2NvbW1vbi9zd2l0Y2gnO1xuaW1wb3J0IHtnZW5lcmF0ZUhhc2hJZH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuXG5jb25zdCBwcm9wVHlwZXMgPSB7XG4gIC8vIFJlcXVpcmVkXG4gIGxheWVyczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9iamVjdCkuaXNSZXF1aXJlZCxcbiAgb25NYXBUb2dnbGVMYXllcjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxufTtcblxuY29uc3QgTWFwTGF5ZXJTZWxlY3QgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAxMnB4O1xuXG4gIC5tYXAtbGF5ZXItc2VsZWN0b3JfX2l0ZW0ge1xuICAgIG1hcmdpbjogMTJweCAwO1xuICB9XG5gO1xuXG5jb25zdCBNYXBMYXllclNlbGVjdG9yID0gKHtsYXllcnMsIG9uTWFwVG9nZ2xlTGF5ZXJ9KSA9PiAoXG4gIDxNYXBMYXllclNlbGVjdCBjbGFzc05hbWU9XCJtYXAtbGF5ZXItc2VsZWN0b3JcIj5cbiAgICB7bGF5ZXJzLm1hcCgobGF5ZXIsIGluZGV4KSA9PiAoXG4gICAgICA8ZGl2IGtleT17bGF5ZXIuaWR9IGNsYXNzTmFtZT1cIm1hcC1sYXllci1zZWxlY3Rvcl9faXRlbVwiPlxuICAgICAgICA8U3dpdGNoXG4gICAgICAgICAgY2hlY2tlZD17bGF5ZXIuaXNWaXNpYmxlfVxuICAgICAgICAgIGlkPXtgJHtsYXllci5pZH0tdG9nZ2xlLSR7Z2VuZXJhdGVIYXNoSWQoNCl9YH1cbiAgICAgICAgICBsYWJlbD17bGF5ZXIubmFtZX1cbiAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBvbk1hcFRvZ2dsZUxheWVyKGxheWVyLmlkKTtcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKSl9XG4gIDwvTWFwTGF5ZXJTZWxlY3Q+XG4pO1xuXG5NYXBMYXllclNlbGVjdG9yLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblxuZXhwb3J0IGRlZmF1bHQgTWFwTGF5ZXJTZWxlY3RvcjtcbiJdfQ==