"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _fileUpload = _interopRequireDefault(require("../common/file-uploader/file-upload"));

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  padding: ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var StyledLoadDataModal = _styledComponents["default"].div(_templateObject(), function (props) {
  return props.theme.modalPadding;
});

var loadDataModalFactory = function loadDataModalFactory() {
  var LoadDataModal = function LoadDataModal(props) {
    return _react["default"].createElement(StyledLoadDataModal, null, _react["default"].createElement("div", {
      className: "load-data-modal"
    }, _react["default"].createElement(_fileUpload["default"], props)));
  };

  LoadDataModal.propTypes = {
    // call backs
    onFileUpload: _propTypes["default"].func.isRequired,
    fileLoading: _propTypes["default"].bool
  };
  return LoadDataModal;
};

var _default = loadDataModalFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL21vZGFscy9sb2FkLWRhdGEtbW9kYWwuanMiXSwibmFtZXMiOlsiU3R5bGVkTG9hZERhdGFNb2RhbCIsInN0eWxlZCIsImRpdiIsInByb3BzIiwidGhlbWUiLCJtb2RhbFBhZGRpbmciLCJsb2FkRGF0YU1vZGFsRmFjdG9yeSIsIkxvYWREYXRhTW9kYWwiLCJwcm9wVHlwZXMiLCJvbkZpbGVVcGxvYWQiLCJQcm9wVHlwZXMiLCJmdW5jIiwiaXNSZXF1aXJlZCIsImZpbGVMb2FkaW5nIiwiYm9vbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLG1CQUFtQixHQUFHQyw2QkFBT0MsR0FBVixvQkFDWixVQUFBQyxLQUFLO0FBQUEsU0FBSUEsS0FBSyxDQUFDQyxLQUFOLENBQVlDLFlBQWhCO0FBQUEsQ0FETyxDQUF6Qjs7QUFJQSxJQUFNQyxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQXVCLEdBQU07QUFDakMsTUFBTUMsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFBSixLQUFLO0FBQUEsV0FDekIsZ0NBQUMsbUJBQUQsUUFDRTtBQUFLLE1BQUEsU0FBUyxFQUFDO0FBQWYsT0FDRSxnQ0FBQyxzQkFBRCxFQUFnQkEsS0FBaEIsQ0FERixDQURGLENBRHlCO0FBQUEsR0FBM0I7O0FBUUFJLEVBQUFBLGFBQWEsQ0FBQ0MsU0FBZCxHQUEwQjtBQUN4QjtBQUNBQyxJQUFBQSxZQUFZLEVBQUVDLHNCQUFVQyxJQUFWLENBQWVDLFVBRkw7QUFHeEJDLElBQUFBLFdBQVcsRUFBRUgsc0JBQVVJO0FBSEMsR0FBMUI7QUFNQSxTQUFPUCxhQUFQO0FBQ0QsQ0FoQkQ7O2VBa0JlRCxvQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxOSBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmltcG9ydCBGaWxlVXBsb2FkIGZyb20gJ2NvbXBvbmVudHMvY29tbW9uL2ZpbGUtdXBsb2FkZXIvZmlsZS11cGxvYWQnO1xuXG5jb25zdCBTdHlsZWRMb2FkRGF0YU1vZGFsID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogJHtwcm9wcyA9PiBwcm9wcy50aGVtZS5tb2RhbFBhZGRpbmd9O1xuYDtcblxuY29uc3QgbG9hZERhdGFNb2RhbEZhY3RvcnkgPSAoKSA9PiB7XG4gIGNvbnN0IExvYWREYXRhTW9kYWwgPSBwcm9wcyA9PiAoXG4gICAgPFN0eWxlZExvYWREYXRhTW9kYWw+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImxvYWQtZGF0YS1tb2RhbFwiPlxuICAgICAgICA8RmlsZVVwbG9hZCB7Li4ucHJvcHN9Lz5cbiAgICAgIDwvZGl2PlxuICAgIDwvU3R5bGVkTG9hZERhdGFNb2RhbD5cbiAgKTtcblxuICBMb2FkRGF0YU1vZGFsLnByb3BUeXBlcyA9IHtcbiAgICAvLyBjYWxsIGJhY2tzXG4gICAgb25GaWxlVXBsb2FkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGZpbGVMb2FkaW5nOiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIHJldHVybiBMb2FkRGF0YU1vZGFsO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9hZERhdGFNb2RhbEZhY3Rvcnk7XG4iXX0=