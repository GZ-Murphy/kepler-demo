"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.LayerColorLegend = exports.MultiColorLegend = exports.SingleColorLegend = exports.LayerSizeLegend = exports.VisualChannelMetric = exports.StyledMapControlLegend = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _d3Color = require("d3-color");

var _colorLegend = _interopRequireDefault(require("../common/color-legend"));

var _defaultSettings = require("../../constants/default-settings");

var _utils = require("../../utils/utils");

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 10px 0 10px ", "px;\n  font-size: 11px;\n  border-bottom-color: ", ";\n  border-bottom-style: solid;\n  border-bottom-width: ", ";\n\n  .legend--layer_name {\n    font-size: 12px;\n    padding-right: ", "px;\n    color: ", ";\n    font-weight: 500;\n  }\n  .legend--layer_type {\n    color: ", ";\n    font-weight: 500;\n    font-size: 11px;\n    padding-right: ", "px;\n  }\n\n  .legend--layer__title {\n    padding-right: ", "px;\n  }\n\n  .legend--layer_by {\n    color: ", ";\n  }\n\n  .legend--layer_color_field {\n    color: ", ";\n    font-weight: 500;\n  }\n\n  .legend--layer_color-legend {\n    margin-top: 6px;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var StyledMapControlLegend = _styledComponents["default"].div(_templateObject(), function (props) {
  return props.theme.mapControl.padding;
}, function (props) {
  return props.theme.panelBorderColor;
}, function (props) {
  return props.last ? 0 : '1px';
}, function (props) {
  return props.theme.mapControl.padding;
}, function (props) {
  return props.theme.textColorHl;
}, function (props) {
  return props.theme.subtextColor;
}, function (props) {
  return props.theme.mapControl.padding;
}, function (props) {
  return props.theme.mapControl.padding;
}, function (props) {
  return props.theme.subtextColor;
}, function (props) {
  return props.theme.textColor;
});

exports.StyledMapControlLegend = StyledMapControlLegend;

var VisualChannelMetric = function VisualChannelMetric(_ref) {
  var name = _ref.name;
  return _react["default"].createElement("div", {
    className: "legend--layer__title"
  }, _react["default"].createElement("span", {
    className: "legend--layer_by"
  }, "by "), _react["default"].createElement("span", {
    className: "legend--layer_color_field"
  }, name));
};

exports.VisualChannelMetric = VisualChannelMetric;

var LayerSizeLegend = function LayerSizeLegend(_ref2) {
  var label = _ref2.label,
      name = _ref2.name;
  return _react["default"].createElement("div", {
    className: "legend--layer_size-schema"
  }, _react["default"].createElement("p", null, _react["default"].createElement("span", {
    className: "legend--layer_by"
  }, label)), _react["default"].createElement(VisualChannelMetric, {
    name: name
  }));
};

exports.LayerSizeLegend = LayerSizeLegend;
var propTypes = {
  layers: _propTypes["default"].arrayOf(_propTypes["default"].object)
};
var SingleColorDomain = [''];

var SingleColorLegend = function SingleColorLegend(_ref3) {
  var width = _ref3.width,
      color = _ref3.color;
  return _react["default"].createElement(_colorLegend["default"], {
    scaleType: "ordinal",
    displayLabel: false,
    domain: SingleColorDomain,
    fieldType: null,
    range: [_d3Color.rgb.apply(void 0, (0, _toConsumableArray2["default"])(color)).toString()],
    width: width
  });
};

exports.SingleColorLegend = SingleColorLegend;

var MultiColorLegend = function MultiColorLegend(_ref4) {
  var colorRange = _ref4.colorRange,
      colorScale = _ref4.colorScale,
      colorDomain = _ref4.colorDomain,
      colorField = _ref4.colorField,
      width = _ref4.width;
  return _react["default"].createElement(_colorLegend["default"], {
    scaleType: colorScale,
    displayLabel: true,
    domain: colorDomain,
    fieldType: colorField && colorField.type || 'real',
    range: colorRange.colors,
    width: width
  });
};

exports.MultiColorLegend = MultiColorLegend;

var LayerColorLegend = function LayerColorLegend(_ref5) {
  var description = _ref5.description,
      config = _ref5.config,
      width = _ref5.width,
      colorChannel = _ref5.colorChannel;
  var enableColorBy = description.measure;
  var scale = colorChannel.scale,
      field = colorChannel.field,
      domain = colorChannel.domain,
      range = colorChannel.range,
      property = colorChannel.property,
      key = colorChannel.key;

  var _map = [scale, field, domain].map(function (k) {
    return config[k];
  }),
      _map2 = (0, _slicedToArray2["default"])(_map, 3),
      colorScale = _map2[0],
      colorField = _map2[1],
      colorDomain = _map2[2];

  var colorRange = config.visConfig[range];
  return _react["default"].createElement("div", null, _react["default"].createElement("div", {
    className: "legend--layer_type"
  }, (0, _utils.camelToTitle)(key)), _react["default"].createElement("div", {
    className: "legend--layer_color-schema"
  }, _react["default"].createElement("div", null, enableColorBy ? _react["default"].createElement(VisualChannelMetric, {
    name: enableColorBy
  }) : null, _react["default"].createElement("div", {
    className: "legend--layer_color-legend"
  }, enableColorBy ? _react["default"].createElement(MultiColorLegend, {
    colorScale: colorScale,
    colorField: colorField,
    colorDomain: colorDomain,
    colorRange: colorRange,
    width: width
  }) : _react["default"].createElement(SingleColorLegend, {
    color: config.visConfig[property] || config[property] || config.color,
    width: width
  })))));
};

exports.LayerColorLegend = LayerColorLegend;

var isColorChannel = function isColorChannel(visualChannel) {
  return [_defaultSettings.CHANNEL_SCALES.color, _defaultSettings.CHANNEL_SCALES.colorAggr].includes(visualChannel.channelScaleType);
};

var MapLegend = function MapLegend(_ref6) {
  var _ref6$layers = _ref6.layers,
      layers = _ref6$layers === void 0 ? [] : _ref6$layers;
  return _react["default"].createElement("div", null, layers.map(function (layer, index) {
    if (!layer.isValidToSave()) {
      return null;
    }

    var width = _defaultSettings.DIMENSIONS.mapControl.width - 2 * _defaultSettings.DIMENSIONS.mapControl.padding;
    var colorChannels = Object.values(layer.visualChannels).filter(isColorChannel);
    var nonColorChannels = Object.values(layer.visualChannels).filter(function (vc) {
      return !isColorChannel(vc);
    });
    return _react["default"].createElement(StyledMapControlLegend, {
      className: "legend--layer",
      last: index === layers.length - 1,
      key: index
    }, _react["default"].createElement("div", {
      className: "legend--layer_name"
    }, layer.config.label), colorChannels.map(function (colorChannel) {
      return !colorChannel.condition || colorChannel.condition(layer.config) ? _react["default"].createElement(LayerColorLegend, {
        key: colorChannel.key,
        description: layer.getVisualChannelDescription(colorChannel.key),
        config: layer.config,
        width: width,
        colorChannel: colorChannel
      }) : null;
    }), nonColorChannels.map(function (visualChannel) {
      var matchCondition = !visualChannel.condition || visualChannel.condition(layer.config);
      var enabled = layer.config[visualChannel.field] || visualChannel.defaultMeasure;
      var description = layer.getVisualChannelDescription(visualChannel.key);

      if (matchCondition && enabled) {
        return _react["default"].createElement(LayerSizeLegend, {
          key: visualChannel.key,
          label: description.label,
          name: description.measure
        });
      }

      return null;
    }));
  }));
};

MapLegend.propTypes = propTypes;
var _default = MapLegend;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,