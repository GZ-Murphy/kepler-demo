"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reselect = require("reselect");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _styledComponents2 = require("../common/styled-components");

var _mapLayerSelector = _interopRequireDefault(require("../common/map-layer-selector"));

var _logo = _interopRequireDefault(require("../common/logo"));

var _mapLegend = _interopRequireDefault(require("./map-legend"));

var _icons = require("../common/icons");

function _templateObject5() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  justify-content: space-between;\n  background-color: ", ";\n  height: 32px;\n  padding: 6px 12px;\n  font-size: 11px;\n  color: ", ";\n\n  button {\n    width: 18px;\n    height: 18px;\n  }\n"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  ", " max-height: 500px;\n  min-height: 100px;\n  overflow: auto;\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  background-color: ", ";\n  flex-grow: 1;\n  z-index: 1;\n  p {\n    margin-bottom: 0;\n  }\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 4px 0;\n  display: flex;\n  justify-content: flex-end;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  right: 0;\n  width: ", "px;\n  padding: ", "px;\n  z-index: 1;\n  top: ", "px;\n  position: absolute;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var StyledMapControl = _styledComponents["default"].div(_templateObject(), function (props) {
  return props.theme.mapControl.width;
}, function (props) {
  return props.theme.mapControl.padding;
}, function (props) {
  return props.top;
});

var StyledMapControlAction = _styledComponents["default"].div(_templateObject2());

var StyledMapControlPanel = _styledComponents["default"].div(_templateObject3(), function (props) {
  return props.theme.mapPanelBackgroundColor;
});

var StyledMapControlPanelContent = _styledComponents["default"].div(_templateObject4(), function (props) {
  return props.theme.dropdownScrollBar;
});

var StyledMapControlPanelHeader = _styledComponents["default"].div(_templateObject5(), function (props) {
  return props.theme.mapPanelHeaderBackgroundColor;
}, function (props) {
  return props.theme.titleTextColor;
});

var ActionPanel = function ActionPanel(_ref) {
  var children = _ref.children;
  return _react["default"].createElement(StyledMapControlAction, null, children);
};

var MapLegendTooltip = function MapLegendTooltip(_ref2) {
  var id = _ref2.id,
      message = _ref2.message;
  return _react["default"].createElement(_styledComponents2.Tooltip, {
    id: id,
    place: "left",
    effect: "solid"
  }, _react["default"].createElement("span", null, message));
};

var LayerSelectorPanel = function LayerSelectorPanel(_ref3) {
  var items = _ref3.items,
      onMapToggleLayer = _ref3.onMapToggleLayer,
      isActive = _ref3.isActive,
      toggleMenuPanel = _ref3.toggleMenuPanel;
  return !isActive ? _react["default"].createElement(_styledComponents2.MapControlButton, {
    key: 1,
    onClick: function onClick(e) {
      e.preventDefault();
      toggleMenuPanel();
    },
    className: "map-control-button toggle-layer",
    "data-tip": true,
    "data-for": "toggle-layer"
  }, _react["default"].createElement(_icons.Layers, {
    height: "22px"
  }), _react["default"].createElement(MapLegendTooltip, {
    id: "toggle-layer",
    message: isActive ? 'Hide layer panel' : 'Show layer panel'
  })) : _react["default"].createElement(MapControlPanel, {
    header: "Visible layers",
    onClick: toggleMenuPanel
  }, _react["default"].createElement(_mapLayerSelector["default"], {
    layers: items,
    onMapToggleLayer: onMapToggleLayer
  }));
};

var MapControlPanel = function MapControlPanel(_ref4) {
  var children = _ref4.children,
      header = _ref4.header,
      onClick = _ref4.onClick,
      _ref4$scale = _ref4.scale,
      scale = _ref4$scale === void 0 ? 1 : _ref4$scale,
      isExport = _ref4.isExport;
  return _react["default"].createElement(StyledMapControlPanel, {
    style: {
      transform: "scale(".concat(scale, ") translate(calc(-").concat(25 * (scale - 1), "% - ").concat(10 * scale, "px), calc(").concat(25 * (scale - 1), "% + ").concat(10 * scale, "px))")
    }
  }, _react["default"].createElement(StyledMapControlPanelHeader, {
    style: {
      position: 'relative'
    }
  }, isExport ? _react["default"].createElement(_logo["default"], {
    version: false,
    appName: "kepler.gl"
  }) : _react["default"].createElement("span", {
    style: {
      verticalAlign: 'middle'
    }
  }, header), isExport ? null : _react["default"].createElement(_styledComponents2.IconRoundSmall, null, _react["default"].createElement(_icons.Close, {
    height: "16px",
    onClick: onClick
  }))), _react["default"].createElement(StyledMapControlPanelContent, null, children));
};

var MapLegendPanel = function MapLegendPanel(_ref5) {
  var layers = _ref5.layers,
      isActive = _ref5.isActive,
      scale = _ref5.scale,
      toggleMenuPanel = _ref5.toggleMenuPanel,
      isExport = _ref5.isExport;
  return !isActive ? _react["default"].createElement(_styledComponents2.MapControlButton, {
    key: 2,
    "data-tip": true,
    "data-for": "show-legend",
    className: "map-control-button show-legend",
    onClick: function onClick(e) {
      e.preventDefault();
      toggleMenuPanel();
    }
  }, _react["default"].createElement(_icons.Legend, {
    height: "22px"
  }), _react["default"].createElement(MapLegendTooltip, {
    id: "show-legend",
    message: 'show legend'
  })) : _react["default"].createElement(MapControlPanel, {
    scale: scale,
    header: 'Layer Legend',
    onClick: toggleMenuPanel,
    isExport: isExport
  }, _react["default"].createElement(_mapLegend["default"], {
    layers: layers
  }));
};

var MapControlFactory = function MapControlFactory() {
  var MapControl =
  /*#__PURE__*/
  function (_Component) {
    (0, _inherits2["default"])(MapControl, _Component);

    function MapControl() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2["default"])(this, MapControl);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(MapControl)).call.apply(_getPrototypeOf2, [this].concat(args)));
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "layerSelector", function (props) {
        return props.layers;
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "layersToRenderSelector", function (props) {
        return props.layersToRender;
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "layerPanelItemsSelector", (0, _reselect.createSelector)(_this.layerSelector, _this.layersToRenderSelector, function (layers, layersToRender) {
        return layers.filter(function (l) {
          return l.config.isVisible;
        }).map(function (layer) {
          return {
            id: layer.id,
            name: layer.config.label,
            // layer
            isVisible: layersToRender[layer.id]
          };
        });
      }));
      return _this;
    }

    (0, _createClass2["default"])(MapControl, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            dragRotate = _this$props.dragRotate,
            layers = _this$props.layers,
            layersToRender = _this$props.layersToRender,
            isSplit = _this$props.isSplit,
            isExport = _this$props.isExport,
            mapIndex = _this$props.mapIndex,
            mapControls = _this$props.mapControls,
            onTogglePerspective = _this$props.onTogglePerspective,
            onToggleSplitMap = _this$props.onToggleSplitMap,
            onMapToggleLayer = _this$props.onMapToggleLayer,
            onToggleMapControl = _this$props.onToggleMapControl,
            scale = _this$props.scale,
            readOnly = _this$props.readOnly;
        var _mapControls$visibleL = mapControls.visibleLayers,
            visibleLayers = _mapControls$visibleL === void 0 ? {} : _mapControls$visibleL,
            _mapControls$mapLegen = mapControls.mapLegend,
            mapLegend = _mapControls$mapLegen === void 0 ? {} : _mapControls$mapLegen,
            _mapControls$toggle3d = mapControls.toggle3d,
            toggle3d = _mapControls$toggle3d === void 0 ? {} : _mapControls$toggle3d,
            _mapControls$splitMap = mapControls.splitMap,
            splitMap = _mapControls$splitMap === void 0 ? {} : _mapControls$splitMap;
        return _react["default"].createElement(StyledMapControl, {
          className: "map-control"
        }, splitMap.show && readOnly !== true ? _react["default"].createElement(ActionPanel, {
          key: 0
        }, _react["default"].createElement(_styledComponents2.MapControlButton, {
          active: isSplit,
          onClick: function onClick(e) {
            e.preventDefault();
            onToggleSplitMap(isSplit ? mapIndex : undefined);
          },
          key: "split-".concat(isSplit),
          className: "map-control-button split-map",
          "data-tip": true,
          "data-for": "action-toggle"
        }, isSplit ? _react["default"].createElement(_icons.Delete, {
          height: "18px"
        }) : _react["default"].createElement(_icons.Split, {
          height: "18px"
        }), _react["default"].createElement(MapLegendTooltip, {
          id: "action-toggle",
          message: isSplit ? 'Close current panel' : 'Switch to dual map view'
        }))) : null, isSplit && visibleLayers.show && readOnly !== true ? _react["default"].createElement(ActionPanel, {
          key: 1
        }, _react["default"].createElement(LayerSelectorPanel, {
          items: this.layerPanelItemsSelector(this.props),
          onMapToggleLayer: onMapToggleLayer,
          isActive: visibleLayers.active,
          toggleMenuPanel: function toggleMenuPanel() {
            return onToggleMapControl('visibleLayers');
          }
        })) : null, toggle3d.show ? _react["default"].createElement(ActionPanel, {
          key: 2
        }, _react["default"].createElement(_styledComponents2.MapControlButton, {
          onClick: function onClick(e) {
            e.preventDefault();
            onTogglePerspective();
          },
          active: dragRotate,
          "data-tip": true,
          "data-for": "action-3d"
        }, _react["default"].createElement(_icons.Cube3d, {
          height: "22px"
        }), _react["default"].createElement(MapLegendTooltip, {
          id: "action-3d",
          message: dragRotate ? 'Disable 3D Map' : '3D Map'
        }))) : null, mapLegend.show ? _react["default"].createElement(ActionPanel, {
          key: 3
        }, _react["default"].createElement(MapLegendPanel, {
          layers: layers.filter(function (l) {
            return layersToRender[l.id];
          }),
          scale: scale,
          isExport: isExport,
          onMapToggleLayer: onMapToggleLayer,
          isActive: mapLegend.active,
          toggleMenuPanel: function toggleMenuPanel() {
            return onToggleMapControl('mapLegend');
          }
        })) : null);
      }
    }]);
    return MapControl;
  }(_react.Component);

  (0, _defineProperty2["default"])(MapControl, "propTypes", {
    datasets: _propTypes["default"].object.isRequired,
    dragRotate: _propTypes["default"].bool.isRequired,
    isSplit: _propTypes["default"].bool.isRequired,
    layers: _propTypes["default"].arrayOf(_propTypes["default"].object),
    layersToRender: _propTypes["default"].object.isRequired,
    mapIndex: _propTypes["default"].number.isRequired,
    mapControls: _propTypes["default"].object.isRequired,
    onTogglePerspective: _propTypes["default"].func.isRequired,
    onToggleSplitMap: _propTypes["default"].func.isRequired,
    onToggleMapControl: _propTypes["default"].func.isRequired,
    onMapToggleLayer: _propTypes["default"].func.isRequired,
    top: _propTypes["default"].number.isRequired,
    // optional
    readOnly: _propTypes["default"].bool,
    scale: _propTypes["default"].number
  });
  (0, _defineProperty2["default"])(MapControl, "defaultProps", {
    isSplit: false,
    top: 0
  });
  return MapControl;
};

var _default = MapControlFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,