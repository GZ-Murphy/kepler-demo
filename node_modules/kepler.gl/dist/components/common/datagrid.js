"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.CellFactory = exports.FieldHeaderFactory = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactVirtualized = require("react-virtualized");

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _reselect = require("reselect");

var _classnames2 = _interopRequireDefault(require("classnames"));

var _fieldToken = _interopRequireDefault(require("./field-token"));

var _icons = require("./icons");

var _dataUtils = require("../../utils/data-utils");

var _constants = require("../../constants");

function _templateObject3() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  border-right: 0;\n  border-bottom: ", ";\n  color: ", ";\n  text-overflow: ellipsis;\n  height: 100%;\n  width: 100%;\n\n  span {\n    text-overflow: ellipsis;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    width: 100%;\n  }\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  display: flex;\n  align-items: center;\n  justify-content: left;\n  border-right: 0;\n  border-bottom: 0;\n  background: ", ";\n  color: ", ";\n  height: 100%;\n\n  .header-content {\n    display: flex;\n    flex-direction: column;\n  }\n\n  .label-wrapper {\n    display: flex;\n    align-items: center;\n  }\n\n  .icon-wrapper {\n    margin-right: ", ";\n    height: 16px;\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  width: 100%;\n  overflow-x: auto;\n\n  .ReactVirtualized__Grid:focus,\n  .ReactVirtualized__Grid:active {\n    outline: 0;\n  }\n  .ReactVirtualized__Grid__innerScrollContainer {\n    ", ";\n  }\n\n  .ReactVirtualized__Grid {\n    .column-0 .cell {\n      padding-left: ", "px;\n    }\n\n    .header-0 .header-cell {\n      padding-left: ", "px;\n    }\n\n    .cell {\n      overflow-y: auto;\n      overflow-x: hidden;\n      padding-right: ", "px;\n    }\n\n    .last {\n      .cell {\n        padding-right: ", "px;\n      }\n      .header-cell {\n        padding-right: ", "px;\n      }\n    }\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var DataGridWrapper = _styledComponents["default"].div(_templateObject(), function (props) {
  return props.theme.modalScrollBar;
}, function (props) {
  return props.theme.gridPaddingSide;
}, function (props) {
  return props.theme.gridPaddingSide;
}, function (props) {
  return props.theme.cellPaddingSide;
}, function (props) {
  return props.theme.gridPaddingSide;
}, function (props) {
  return props.theme.gridPaddingSide;
});

var StyledFieldHeader = _styledComponents["default"].div(_templateObject2(), function (props) {
  return props.theme.panelBackgroundLT;
}, function (props) {
  return props.theme.titleColorLT;
}, function (props) {
  return props.type === 'timestamp' ? '2px' : '0';
});

var FieldHeaderFactory = function FieldHeaderFactory() {
  var Header = function Header(_ref) {
    var className = _ref.className,
        value = _ref.value,
        type = _ref.type;
    return _react["default"].createElement(StyledFieldHeader, {
      className: className || '',
      type: type,
      title: value
    }, _react["default"].createElement("div", {
      className: "field-header-content"
    }, _react["default"].createElement("div", {
      className: "label-wrapper"
    }, _react["default"].createElement("div", {
      className: "icon-wrapper"
    }, type === 'timestamp' ? _react["default"].createElement(_icons.Clock, {
      height: "16px"
    }) : null), _react["default"].createElement("span", null, value)), _react["default"].createElement("div", {
      className: "field-wrapper"
    }, _react["default"].createElement(_fieldToken["default"], {
      type: type
    }))));
  };

  Header.displayName = 'Header';
  return Header;
};

exports.FieldHeaderFactory = FieldHeaderFactory;

var StyledCell = _styledComponents["default"].div(_templateObject3(), function (props) {
  return props.theme.panelBorderLT;
}, function (props) {
  return props.theme.labelColorLT;
});

var CellFactory = function CellFactory() {
  var Cell = function Cell(_ref2) {
    var className = _ref2.className,
        value = _ref2.value;
    return _react["default"].createElement(StyledCell, {
      className: className || '',
      title: value
    }, _react["default"].createElement("span", null, value));
  };

  Cell.displayName = 'Cell';
  return Cell;
};

exports.CellFactory = CellFactory;
DataGridFactory.deps = [FieldHeaderFactory, CellFactory];

function DataGridFactory(FieldHeader, Cell) {
  var DataGrid =
  /*#__PURE__*/
  function (_PureComponent) {
    (0, _inherits2["default"])(DataGrid, _PureComponent);

    function DataGrid() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2["default"])(this, DataGrid);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(DataGrid)).call.apply(_getPrototypeOf2, [this].concat(args)));
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "columnsSelector", function (props) {
        return props.columns;
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "hasGeojson", (0, _reselect.createSelector)(_this.columnsSelector, function (columns) {
        return columns.some(function (c) {
          return c.type === _constants.ALL_FIELD_TYPES.geojson;
        });
      }));
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_cellRenderer", function (_ref3) {
        var _classnames;

        var columnIndex = _ref3.columnIndex,
            key = _ref3.key,
            rowIndex = _ref3.rowIndex,
            style = _ref3.style;
        var _this$props = _this.props,
            columns = _this$props.columns,
            rows = _this$props.rows;
        var isLast = columnIndex === columns.length - 1;
        var type = columns[columnIndex].type; // rowIndex -1 because data rows start rendering at index 1 and we normalize back using the -1 param

        var className = (0, _classnames2["default"])((_classnames = {
          last: isLast
        }, (0, _defineProperty2["default"])(_classnames, "header-".concat(columnIndex), rowIndex === 0), (0, _defineProperty2["default"])(_classnames, "row-".concat(rowIndex - 1, " column-").concat(columnIndex), rowIndex > 0), _classnames));
        return _react["default"].createElement("div", {
          key: key,
          style: style,
          className: className
        }, rowIndex === 0 ? _react["default"].createElement(FieldHeader, {
          className: "header-cell ".concat(type),
          value: columns[columnIndex].name,
          type: type
        }) : _react["default"].createElement(Cell, {
          className: "cell ".concat(type),
          value: (0, _dataUtils.parseFieldValue)(rows[rowIndex - 1][columnIndex], type),
          type: type
        }));
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_rowHeight", function (_ref4) {
        var index = _ref4.index;
        return index === 0 ? _this.props.theme.cellHeaderHeight : _this.hasGeojson(_this.props) ? _this.props.theme.extendCellHeight : _this.props.theme.cellHeight;
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_columnWidth", function (_ref5) {
        var index = _ref5.index;
        var isGeojsonField = _this.props.columns[index].type === _constants.ALL_FIELD_TYPES.geojson;
        return isGeojsonField ? _this.props.theme.extendColumnWidth : _this.props.theme.columnWidth;
      });
      return _this;
    }

    (0, _createClass2["default"])(DataGrid, [{
      key: "render",
      value: function render() {
        var _this$props2 = this.props,
            columns = _this$props2.columns,
            height = _this$props2.height,
            rows = _this$props2.rows,
            theme = _this$props2.theme,
            width = _this$props2.width;
        return _react["default"].createElement(DataGridWrapper, {
          className: "datagrid-wrapper"
        }, _react["default"].createElement(_reactVirtualized.MultiGrid, {
          cellRenderer: this._cellRenderer,
          columnWidth: this._columnWidth,
          columnCount: columns.length,
          fixedRowCount: 1,
          enableFixedRowScroll: true,
          width: width || theme.gridDefaultWidth,
          height: height || theme.gridDefaultHeight,
          rowHeight: this._rowHeight,
          rowCount: rows.length + 1,
          hideTopRightGridScrollbar: true,
          hideBottomLeftGridScrollbar: true
        }));
      }
    }]);
    return DataGrid;
  }(_react.PureComponent);

  (0, _defineProperty2["default"])(DataGrid, "propTypes", {
    theme: _propTypes["default"].object,
    columns: _propTypes["default"].arrayOf(_propTypes["default"].object).isRequired,
    height: _propTypes["default"].number.isRequired,
    rows: _propTypes["default"].arrayOf(_propTypes["default"].arrayOf(_propTypes["default"].any)).isRequired,
    width: _propTypes["default"].number.isRequired
  });
  DataGrid.displayName = 'DataGrid'; // Wrapping the component using withTheme because we need to
  // access variables outside sytled-components context

  return (0, _styledComponents.withTheme)(DataGrid);
}

var _default = DataGridFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,