"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _keymirror = _interopRequireDefault(require("keymirror"));

var _defaultSettings = require("./default-settings");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Kepler.gl action types, can be listened by reducers to perform additional tasks whenever an action is called in kepler.gl
 * @constant
 * @type {Object}
 * @public
 *
 * @example
 * // store.js
 * import {handleActions} from 'redux-actions';
 * import {createStore, combineReducers, applyMiddleware} from 'redux';
 * import {taskMiddleware} from 'react-palm/tasks';
 *
 * import keplerGlReducer from 'kepler.gl/reducers';
 * import {ActionTypes} from 'kepler.gl/actions';
 *
 * const appReducer = handleActions({
 *   // listen on kepler.gl map update action to store a copy of viewport in app state
 *   [ActionTypes.UPDATE_MAP]: (state, action) => ({
 *     ...state,
 *     viewport: action.payload
 *   }),
 * }, {});
 *
 * const reducers = combineReducers({
 *   app: appReducer,
 *   keplerGl: keplerGlReducer
 * });
 *
 * export default createStore(reducers, {}, applyMiddleware(taskMiddleware))
 */
var ActionTypes = (0, _keymirror["default"])({
  // identity action
  REGISTER_ENTRY: null,
  DELETE_ENTRY: null,
  RENAME_ENTRY: null,
  // visState
  ADD_DATA: null,
  ADD_FILTER: null,
  ADD_LAYER: null,
  INTERACTION_CONFIG_CHANGE: null,
  LAYER_CONFIG_CHANGE: null,
  LAYER_VISUAL_CHANNEL_CHANGE: null,
  LAYER_TYPE_CHANGE: null,
  LAYER_VIS_CONFIG_CHANGE: null,
  LAYER_TEXT_LABEL_CHANGE: null,
  LAYER_HOVER: null,
  LAYER_CLICK: null,
  MAP_CLICK: null,
  MOUSE_MOVE: null,
  REMOVE_FILTER: null,
  REMOVE_LAYER: null,
  REMOVE_DATASET: null,
  REORDER_LAYER: null,
  SET_FILTER: null,
  SHOW_DATASET_TABLE: null,
  UPDATE_LAYER_BLENDING: null,
  UPDATE_VIS_DATA: null,
  TOGGLE_FILTER_ANIMATION: null,
  UPDATE_FILTER_ANIMATION_SPEED: null,
  PLAY_ANIMATION: null,
  UPDATE_ANIMATION_TIME: null,
  UPDATE_ANIMATION_SPEED: null,
  UPDATE_LAYER_ANIMATION_SPEED: null,
  TOGGLE_LAYER_CONFIG_ACTIVE: null,
  ENLARGE_FILTER: null,
  SET_VISIBLE_LAYERS_FOR_MAP: null,
  TOGGLE_LAYER_FOR_MAP: null,
  SET_FILTER_PLOT: null,
  LOAD_FILES: null,
  LOAD_FILES_ERR: null,
  LAYER_COLOR_UI_CHANGE: null,
  // mapState
  UPDATE_MAP: null,
  FIT_BOUNDS: null,
  TOGGLE_PERSPECTIVE: null,
  TOGGLE_SPLIT_MAP: null,
  TOGGLE_FULLSCREEN: null,
  // mapStyle
  MAP_CONFIG_CHANGE: null,
  SET_DEFAULT_MAP_STYLE: null,
  MAP_STYLE_CHANGE: null,
  LOAD_MAP_STYLES: null,
  LOAD_MAP_STYLE_ERR: null,
  INPUT_MAP_STYLE: null,
  LOAD_CUSTOM_MAP_STYLE: null,
  ADD_CUSTOM_MAP_STYLE: null,
  REQUEST_MAP_STYLES: null,
  SET_3D_BUILDING_COLOR: null,
  // uiState
  TOGGLE_SIDE_PANEL: null,
  TOGGLE_MODAL: null,
  SHOW_EXPORT_DROPDOWN: null,
  HIDE_EXPORT_DROPDOWN: null,
  OPEN_DELETE_MODAL: null,
  TOGGLE_MAP_CONTROL: null,
  ADD_NOTIFICATION: null,
  REMOVE_NOTIFICATION: null,
  // uiState > export image
  SET_RATIO: null,
  SET_RESOLUTION: null,
  TOGGLE_LEGEND: null,
  START_EXPORTING_IMAGE: null,
  SET_EXPORT_IMAGE_DATA_URI: null,
  SET_EXPORT_IMAGE_ERROR: null,
  CLEANUP_EXPORT_IMAGE: null,
  // uiState > export data
  SET_EXPORT_SELECTED_DATASET: null,
  SET_EXPORT_DATA_TYPE: null,
  SET_EXPORT_FILTERED: null,
  SET_EXPORT_DATA: null,
  // uiState > export map
  SET_EXPORT_MAP_FORMAT: null,
  SET_USER_MAPBOX_ACCESS_TOKEN: null,
  SET_EXPORT_MAP_HTML_MODE: null,
  // all
  INIT: null,
  ADD_DATA_TO_MAP: null,
  RECEIVE_MAP_CONFIG: null,
  RESET_MAP_CONFIG: null
});

var addPrefix = function addPrefix(actions) {
  return Object.keys(actions).reduce(function (accu, key) {
    return _objectSpread({}, accu, (0, _defineProperty2["default"])({}, key, "".concat(_defaultSettings.ACTION_PREFIX).concat(actions[key])));
  }, {});
};

var _default = addPrefix(ActionTypes);

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,