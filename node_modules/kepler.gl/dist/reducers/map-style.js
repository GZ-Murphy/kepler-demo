"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.mapStyleReducerFactory = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reduxActions = require("redux-actions");

var _actionTypes = _interopRequireDefault(require("../constants/action-types"));

var mapStyleUpdaters = _interopRequireWildcard(require("./map-style-updaters"));

var _actionHandler;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Important: Do not rename `actionHandler` or the assignment pattern of property value.
 * It is used to generate documentation
 */
var actionHandler = (_actionHandler = {}, (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].INIT, mapStyleUpdaters.initMapStyleUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].INPUT_MAP_STYLE, mapStyleUpdaters.inputMapStyleUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].MAP_CONFIG_CHANGE, mapStyleUpdaters.mapConfigChangeUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].MAP_STYLE_CHANGE, mapStyleUpdaters.mapStyleChangeUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].REQUEST_MAP_STYLES, mapStyleUpdaters.requestMapStylesUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].LOAD_MAP_STYLES, mapStyleUpdaters.loadMapStylesUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].LOAD_MAP_STYLE_ERR, mapStyleUpdaters.loadMapStyleErrUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].RECEIVE_MAP_CONFIG, mapStyleUpdaters.receiveMapConfigUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].LOAD_CUSTOM_MAP_STYLE, mapStyleUpdaters.loadCustomMapStyleUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].ADD_CUSTOM_MAP_STYLE, mapStyleUpdaters.addCustomMapStyleUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].RESET_MAP_CONFIG, mapStyleUpdaters.resetMapConfigMapStyleUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].SET_3D_BUILDING_COLOR, mapStyleUpdaters.set3dBuildingColorUpdater), _actionHandler);

var mapStyleReducerFactory = function mapStyleReducerFactory() {
  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return (0, _reduxActions.handleActions)(actionHandler, _objectSpread({}, mapStyleUpdaters.INITIAL_MAP_STYLE, {}, initialState, {
    initialState: initialState
  }));
};

exports.mapStyleReducerFactory = mapStyleReducerFactory;

var _default = mapStyleReducerFactory();

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy9tYXAtc3R5bGUuanMiXSwibmFtZXMiOlsiYWN0aW9uSGFuZGxlciIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIm1hcFN0eWxlVXBkYXRlcnMiLCJpbml0TWFwU3R5bGVVcGRhdGVyIiwiSU5QVVRfTUFQX1NUWUxFIiwiaW5wdXRNYXBTdHlsZVVwZGF0ZXIiLCJNQVBfQ09ORklHX0NIQU5HRSIsIm1hcENvbmZpZ0NoYW5nZVVwZGF0ZXIiLCJNQVBfU1RZTEVfQ0hBTkdFIiwibWFwU3R5bGVDaGFuZ2VVcGRhdGVyIiwiUkVRVUVTVF9NQVBfU1RZTEVTIiwicmVxdWVzdE1hcFN0eWxlc1VwZGF0ZXIiLCJMT0FEX01BUF9TVFlMRVMiLCJsb2FkTWFwU3R5bGVzVXBkYXRlciIsIkxPQURfTUFQX1NUWUxFX0VSUiIsImxvYWRNYXBTdHlsZUVyclVwZGF0ZXIiLCJSRUNFSVZFX01BUF9DT05GSUciLCJyZWNlaXZlTWFwQ29uZmlnVXBkYXRlciIsIkxPQURfQ1VTVE9NX01BUF9TVFlMRSIsImxvYWRDdXN0b21NYXBTdHlsZVVwZGF0ZXIiLCJBRERfQ1VTVE9NX01BUF9TVFlMRSIsImFkZEN1c3RvbU1hcFN0eWxlVXBkYXRlciIsIlJFU0VUX01BUF9DT05GSUciLCJyZXNldE1hcENvbmZpZ01hcFN0eWxlVXBkYXRlciIsIlNFVF8zRF9CVUlMRElOR19DT0xPUiIsInNldDNkQnVpbGRpbmdDb2xvclVwZGF0ZXIiLCJtYXBTdHlsZVJlZHVjZXJGYWN0b3J5IiwiaW5pdGlhbFN0YXRlIiwiSU5JVElBTF9NQVBfU1RZTEUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBRUE7Ozs7QUFJQSxJQUFNQSxhQUFhLDBFQUNoQkMsd0JBQVlDLElBREksRUFDR0MsZ0JBQWdCLENBQUNDLG1CQURwQixvREFFaEJILHdCQUFZSSxlQUZJLEVBRWNGLGdCQUFnQixDQUFDRyxvQkFGL0Isb0RBR2hCTCx3QkFBWU0saUJBSEksRUFHZ0JKLGdCQUFnQixDQUFDSyxzQkFIakMsb0RBSWhCUCx3QkFBWVEsZ0JBSkksRUFJZU4sZ0JBQWdCLENBQUNPLHFCQUpoQyxvREFLaEJULHdCQUFZVSxrQkFMSSxFQUtpQlIsZ0JBQWdCLENBQUNTLHVCQUxsQyxvREFNaEJYLHdCQUFZWSxlQU5JLEVBTWNWLGdCQUFnQixDQUFDVyxvQkFOL0Isb0RBT2hCYix3QkFBWWMsa0JBUEksRUFPaUJaLGdCQUFnQixDQUFDYSxzQkFQbEMsb0RBUWhCZix3QkFBWWdCLGtCQVJJLEVBUWlCZCxnQkFBZ0IsQ0FBQ2UsdUJBUmxDLG9EQVNoQmpCLHdCQUFZa0IscUJBVEksRUFTb0JoQixnQkFBZ0IsQ0FBQ2lCLHlCQVRyQyxvREFVaEJuQix3QkFBWW9CLG9CQVZJLEVBVW1CbEIsZ0JBQWdCLENBQUNtQix3QkFWcEMsb0RBV2hCckIsd0JBQVlzQixnQkFYSSxFQVdlcEIsZ0JBQWdCLENBQUNxQiw2QkFYaEMsb0RBWWhCdkIsd0JBQVl3QixxQkFaSSxFQVlvQnRCLGdCQUFnQixDQUFDdUIseUJBWnJDLGtCQUFuQjs7QUFlTyxJQUFNQyxzQkFBc0IsR0FBRyxTQUF6QkEsc0JBQXlCO0FBQUEsTUFBQ0MsWUFBRCx1RUFBZ0IsRUFBaEI7QUFBQSxTQUNwQyxpQ0FBYzVCLGFBQWQsb0JBQWlDRyxnQkFBZ0IsQ0FBQzBCLGlCQUFsRCxNQUF3RUQsWUFBeEU7QUFBc0ZBLElBQUFBLFlBQVksRUFBWkE7QUFBdEYsS0FEb0M7QUFBQSxDQUEvQjs7OztlQUdRRCxzQkFBc0IsRSIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxOSBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCB7aGFuZGxlQWN0aW9uc30gZnJvbSAncmVkdXgtYWN0aW9ucyc7XG5pbXBvcnQgQWN0aW9uVHlwZXMgZnJvbSAnY29uc3RhbnRzL2FjdGlvbi10eXBlcyc7XG5pbXBvcnQgKiBhcyBtYXBTdHlsZVVwZGF0ZXJzIGZyb20gJy4vbWFwLXN0eWxlLXVwZGF0ZXJzJztcblxuLyoqXG4gKiBJbXBvcnRhbnQ6IERvIG5vdCByZW5hbWUgYGFjdGlvbkhhbmRsZXJgIG9yIHRoZSBhc3NpZ25tZW50IHBhdHRlcm4gb2YgcHJvcGVydHkgdmFsdWUuXG4gKiBJdCBpcyB1c2VkIHRvIGdlbmVyYXRlIGRvY3VtZW50YXRpb25cbiAqL1xuY29uc3QgYWN0aW9uSGFuZGxlciA9IHtcbiAgW0FjdGlvblR5cGVzLklOSVRdOiBtYXBTdHlsZVVwZGF0ZXJzLmluaXRNYXBTdHlsZVVwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5JTlBVVF9NQVBfU1RZTEVdOiBtYXBTdHlsZVVwZGF0ZXJzLmlucHV0TWFwU3R5bGVVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuTUFQX0NPTkZJR19DSEFOR0VdOiBtYXBTdHlsZVVwZGF0ZXJzLm1hcENvbmZpZ0NoYW5nZVVwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5NQVBfU1RZTEVfQ0hBTkdFXTogbWFwU3R5bGVVcGRhdGVycy5tYXBTdHlsZUNoYW5nZVVwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5SRVFVRVNUX01BUF9TVFlMRVNdOiBtYXBTdHlsZVVwZGF0ZXJzLnJlcXVlc3RNYXBTdHlsZXNVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuTE9BRF9NQVBfU1RZTEVTXTogbWFwU3R5bGVVcGRhdGVycy5sb2FkTWFwU3R5bGVzVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLkxPQURfTUFQX1NUWUxFX0VSUl06IG1hcFN0eWxlVXBkYXRlcnMubG9hZE1hcFN0eWxlRXJyVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLlJFQ0VJVkVfTUFQX0NPTkZJR106IG1hcFN0eWxlVXBkYXRlcnMucmVjZWl2ZU1hcENvbmZpZ1VwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5MT0FEX0NVU1RPTV9NQVBfU1RZTEVdOiBtYXBTdHlsZVVwZGF0ZXJzLmxvYWRDdXN0b21NYXBTdHlsZVVwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5BRERfQ1VTVE9NX01BUF9TVFlMRV06IG1hcFN0eWxlVXBkYXRlcnMuYWRkQ3VzdG9tTWFwU3R5bGVVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuUkVTRVRfTUFQX0NPTkZJR106IG1hcFN0eWxlVXBkYXRlcnMucmVzZXRNYXBDb25maWdNYXBTdHlsZVVwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5TRVRfM0RfQlVJTERJTkdfQ09MT1JdOiBtYXBTdHlsZVVwZGF0ZXJzLnNldDNkQnVpbGRpbmdDb2xvclVwZGF0ZXJcbn07XG5cbmV4cG9ydCBjb25zdCBtYXBTdHlsZVJlZHVjZXJGYWN0b3J5ID0gKGluaXRpYWxTdGF0ZSA9IHt9KSA9PlxuICBoYW5kbGVBY3Rpb25zKGFjdGlvbkhhbmRsZXIsIHsuLi5tYXBTdHlsZVVwZGF0ZXJzLklOSVRJQUxfTUFQX1NUWUxFLCAuLi5pbml0aWFsU3RhdGUsIGluaXRpYWxTdGF0ZX0pO1xuXG5leHBvcnQgZGVmYXVsdCBtYXBTdHlsZVJlZHVjZXJGYWN0b3J5KCk7XG4iXX0=