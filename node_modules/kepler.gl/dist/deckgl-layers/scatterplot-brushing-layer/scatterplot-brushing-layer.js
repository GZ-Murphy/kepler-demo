"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _deck = require("deck.gl");

var _shaderUtils = require("../layer-utils/shader-utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function addBrushingVsShader(vs) {
  return (0, _shaderUtils.editShader)(vs, 'scatterplot brushing vs', 'outerRadiusPixels += stroked * lineWidthPixels / 2.0;', 'outerRadiusPixels = brushing_getRadius(instancePositions, outerRadiusPixels + stroked * lineWidthPixels / 2.0);');
}

var defaultProps = _objectSpread({}, _deck.ScatterplotLayer.defaultProps, {
  enableBrushing: true,
  // brush radius in meters
  brushRadius: 100000,
  mousePosition: [0, 0],
  outsideBrushRadius: 0
});

var ScatterplotBrushingLayer =
/*#__PURE__*/
function (_ScatterplotLayer) {
  (0, _inherits2["default"])(ScatterplotBrushingLayer, _ScatterplotLayer);

  function ScatterplotBrushingLayer() {
    (0, _classCallCheck2["default"])(this, ScatterplotBrushingLayer);
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ScatterplotBrushingLayer).apply(this, arguments));
  }

  (0, _createClass2["default"])(ScatterplotBrushingLayer, [{
    key: "getShaders",
    value: function getShaders() {
      var shaders = (0, _get2["default"])((0, _getPrototypeOf2["default"])(ScatterplotBrushingLayer.prototype), "getShaders", this).call(this);
      return {
        vs: addBrushingVsShader(shaders.vs),
        fs: shaders.fs,
        modules: shaders.modules.concat(['brushing'])
      };
    }
  }, {
    key: "draw",
    value: function draw(opts) {
      var uniforms = opts.uniforms;
      var _this$props = this.props,
          brushRadius = _this$props.brushRadius,
          enableBrushing = _this$props.enableBrushing,
          mousePosition = _this$props.mousePosition,
          outsideBrushRadius = _this$props.outsideBrushRadius; // add uniforms

      (0, _get2["default"])((0, _getPrototypeOf2["default"])(ScatterplotBrushingLayer.prototype), "draw", this).call(this, _objectSpread({}, opts, {
        uniforms: _objectSpread({}, uniforms, {
          brushing_uBrushRadius: brushRadius,
          brushing_uOutsideBrushRadius: outsideBrushRadius,
          brushing_uMousePosition: mousePosition ? new Float32Array(this.unproject(mousePosition)) : defaultProps.mousePosition,
          brushing_uEnableBrushing: enableBrushing ? 1 : 0
        })
      }));
    }
  }]);
  return ScatterplotBrushingLayer;
}(_deck.ScatterplotLayer);

exports["default"] = ScatterplotBrushingLayer;
ScatterplotBrushingLayer.layerName = 'ScatterplotBrushingLayer';
ScatterplotBrushingLayer.defaultProps = defaultProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNrZ2wtbGF5ZXJzL3NjYXR0ZXJwbG90LWJydXNoaW5nLWxheWVyL3NjYXR0ZXJwbG90LWJydXNoaW5nLWxheWVyLmpzIl0sIm5hbWVzIjpbImFkZEJydXNoaW5nVnNTaGFkZXIiLCJ2cyIsImRlZmF1bHRQcm9wcyIsIlNjYXR0ZXJwbG90TGF5ZXIiLCJlbmFibGVCcnVzaGluZyIsImJydXNoUmFkaXVzIiwibW91c2VQb3NpdGlvbiIsIm91dHNpZGVCcnVzaFJhZGl1cyIsIlNjYXR0ZXJwbG90QnJ1c2hpbmdMYXllciIsInNoYWRlcnMiLCJmcyIsIm1vZHVsZXMiLCJjb25jYXQiLCJvcHRzIiwidW5pZm9ybXMiLCJwcm9wcyIsImJydXNoaW5nX3VCcnVzaFJhZGl1cyIsImJydXNoaW5nX3VPdXRzaWRlQnJ1c2hSYWRpdXMiLCJicnVzaGluZ191TW91c2VQb3NpdGlvbiIsIkZsb2F0MzJBcnJheSIsInVucHJvamVjdCIsImJydXNoaW5nX3VFbmFibGVCcnVzaGluZyIsImxheWVyTmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7Ozs7OztBQUVBLFNBQVNBLG1CQUFULENBQTZCQyxFQUE3QixFQUFpQztBQUMvQixTQUFPLDZCQUNMQSxFQURLLEVBRUwseUJBRkssRUFHTCx1REFISyxFQUlMLGlIQUpLLENBQVA7QUFNRDs7QUFFRCxJQUFNQyxZQUFZLHFCQUNiQyx1QkFBaUJELFlBREo7QUFFaEJFLEVBQUFBLGNBQWMsRUFBRSxJQUZBO0FBR2hCO0FBQ0FDLEVBQUFBLFdBQVcsRUFBRSxNQUpHO0FBS2hCQyxFQUFBQSxhQUFhLEVBQUUsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUxDO0FBTWhCQyxFQUFBQSxrQkFBa0IsRUFBRTtBQU5KLEVBQWxCOztJQVNxQkMsd0I7Ozs7Ozs7Ozs7OztpQ0FFTjtBQUNYLFVBQU1DLE9BQU8sNkhBQWI7QUFDQSxhQUFPO0FBQ0xSLFFBQUFBLEVBQUUsRUFBRUQsbUJBQW1CLENBQUNTLE9BQU8sQ0FBQ1IsRUFBVCxDQURsQjtBQUVMUyxRQUFBQSxFQUFFLEVBQUVELE9BQU8sQ0FBQ0MsRUFGUDtBQUdMQyxRQUFBQSxPQUFPLEVBQUVGLE9BQU8sQ0FBQ0UsT0FBUixDQUFnQkMsTUFBaEIsQ0FBdUIsQ0FBQyxVQUFELENBQXZCO0FBSEosT0FBUDtBQUtEOzs7eUJBQ0lDLEksRUFBTTtBQUFBLFVBQ0ZDLFFBREUsR0FDVUQsSUFEVixDQUNGQyxRQURFO0FBQUEsd0JBT0wsS0FBS0MsS0FQQTtBQUFBLFVBR1BWLFdBSE8sZUFHUEEsV0FITztBQUFBLFVBSVBELGNBSk8sZUFJUEEsY0FKTztBQUFBLFVBS1BFLGFBTE8sZUFLUEEsYUFMTztBQUFBLFVBTVBDLGtCQU5PLGVBTVBBLGtCQU5PLEVBU1Q7O0FBQ0EsNklBQ0tNLElBREw7QUFFRUMsUUFBQUEsUUFBUSxvQkFDSEEsUUFERztBQUVORSxVQUFBQSxxQkFBcUIsRUFBRVgsV0FGakI7QUFHTlksVUFBQUEsNEJBQTRCLEVBQUVWLGtCQUh4QjtBQUlOVyxVQUFBQSx1QkFBdUIsRUFBRVosYUFBYSxHQUNsQyxJQUFJYSxZQUFKLENBQWlCLEtBQUtDLFNBQUwsQ0FBZWQsYUFBZixDQUFqQixDQURrQyxHQUVsQ0osWUFBWSxDQUFDSSxhQU5YO0FBT05lLFVBQUFBLHdCQUF3QixFQUFFakIsY0FBYyxHQUFHLENBQUgsR0FBTztBQVB6QztBQUZWO0FBWUQ7OztFQWhDbURELHNCOzs7QUFtQ3RESyx3QkFBd0IsQ0FBQ2MsU0FBekIsR0FBcUMsMEJBQXJDO0FBQ0FkLHdCQUF3QixDQUFDTixZQUF6QixHQUF3Q0EsWUFBeEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTkgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQge1NjYXR0ZXJwbG90TGF5ZXJ9IGZyb20gJ2RlY2suZ2wnO1xuaW1wb3J0IHtlZGl0U2hhZGVyfSBmcm9tICdkZWNrZ2wtbGF5ZXJzL2xheWVyLXV0aWxzL3NoYWRlci11dGlscyc7XG5cbmZ1bmN0aW9uIGFkZEJydXNoaW5nVnNTaGFkZXIodnMpIHtcbiAgcmV0dXJuIGVkaXRTaGFkZXIoXG4gICAgdnMsXG4gICAgJ3NjYXR0ZXJwbG90IGJydXNoaW5nIHZzJyxcbiAgICAnb3V0ZXJSYWRpdXNQaXhlbHMgKz0gc3Ryb2tlZCAqIGxpbmVXaWR0aFBpeGVscyAvIDIuMDsnLFxuICAgICdvdXRlclJhZGl1c1BpeGVscyA9IGJydXNoaW5nX2dldFJhZGl1cyhpbnN0YW5jZVBvc2l0aW9ucywgb3V0ZXJSYWRpdXNQaXhlbHMgKyBzdHJva2VkICogbGluZVdpZHRoUGl4ZWxzIC8gMi4wKTsnXG4gICk7XG59XG5cbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgLi4uU2NhdHRlcnBsb3RMYXllci5kZWZhdWx0UHJvcHMsXG4gIGVuYWJsZUJydXNoaW5nOiB0cnVlLFxuICAvLyBicnVzaCByYWRpdXMgaW4gbWV0ZXJzXG4gIGJydXNoUmFkaXVzOiAxMDAwMDAsXG4gIG1vdXNlUG9zaXRpb246IFswLCAwXSxcbiAgb3V0c2lkZUJydXNoUmFkaXVzOiAwXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY2F0dGVycGxvdEJydXNoaW5nTGF5ZXIgZXh0ZW5kcyBTY2F0dGVycGxvdExheWVyIHtcblxuICBnZXRTaGFkZXJzKCkge1xuICAgIGNvbnN0IHNoYWRlcnMgPSBzdXBlci5nZXRTaGFkZXJzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZzOiBhZGRCcnVzaGluZ1ZzU2hhZGVyKHNoYWRlcnMudnMpLFxuICAgICAgZnM6IHNoYWRlcnMuZnMsXG4gICAgICBtb2R1bGVzOiBzaGFkZXJzLm1vZHVsZXMuY29uY2F0KFsnYnJ1c2hpbmcnXSlcbiAgICB9O1xuICB9XG4gIGRyYXcob3B0cykge1xuICAgIGNvbnN0IHt1bmlmb3Jtc30gPSBvcHRzO1xuICAgIGNvbnN0IHtcbiAgICAgIGJydXNoUmFkaXVzLFxuICAgICAgZW5hYmxlQnJ1c2hpbmcsXG4gICAgICBtb3VzZVBvc2l0aW9uLFxuICAgICAgb3V0c2lkZUJydXNoUmFkaXVzXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAvLyBhZGQgdW5pZm9ybXNcbiAgICBzdXBlci5kcmF3KHtcbiAgICAgIC4uLm9wdHMsXG4gICAgICB1bmlmb3Jtczoge1xuICAgICAgICAuLi51bmlmb3JtcyxcbiAgICAgICAgYnJ1c2hpbmdfdUJydXNoUmFkaXVzOiBicnVzaFJhZGl1cyxcbiAgICAgICAgYnJ1c2hpbmdfdU91dHNpZGVCcnVzaFJhZGl1czogb3V0c2lkZUJydXNoUmFkaXVzLFxuICAgICAgICBicnVzaGluZ191TW91c2VQb3NpdGlvbjogbW91c2VQb3NpdGlvblxuICAgICAgICAgID8gbmV3IEZsb2F0MzJBcnJheSh0aGlzLnVucHJvamVjdChtb3VzZVBvc2l0aW9uKSlcbiAgICAgICAgICA6IGRlZmF1bHRQcm9wcy5tb3VzZVBvc2l0aW9uLFxuICAgICAgICBicnVzaGluZ191RW5hYmxlQnJ1c2hpbmc6IGVuYWJsZUJydXNoaW5nID8gMSA6IDBcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5TY2F0dGVycGxvdEJydXNoaW5nTGF5ZXIubGF5ZXJOYW1lID0gJ1NjYXR0ZXJwbG90QnJ1c2hpbmdMYXllcic7XG5TY2F0dGVycGxvdEJydXNoaW5nTGF5ZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuIl19