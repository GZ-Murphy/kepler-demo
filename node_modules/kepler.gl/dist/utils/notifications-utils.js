"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNotification = createNotification;
exports.exportImageError = exports.successNotification = exports.errorNotification = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _utils = require("./utils");

var _defaultSettings = require("../constants/default-settings");

var _userGuides = require("../constants/user-guides");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Creates a notofication
 * @param {string} message - Message to display during the notification
 * @param {string} [type] - The type of message. One of DEFAULT_NOTIFICATION_TYPES
 * @param {string} [topic] - The topic the notification belongs to. One of DEFAULT_NOTIFICATION_TOPICS
 * @param {string} [id] optional id for notification. If not provided it will be generated by the method
 * @param {object} [options] - Extra parameters to store as part of hte notification
 * @returns {object}
 */
function createNotification(_ref) {
  var _ref$message = _ref.message,
      message = _ref$message === void 0 ? _defaultSettings.DEFAULT_NOTIFICATION_MESSAGE : _ref$message,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? _defaultSettings.DEFAULT_NOTIFICATION_TYPES.info : _ref$type,
      _ref$topic = _ref.topic,
      topic = _ref$topic === void 0 ? _defaultSettings.DEFAULT_NOTIFICATION_TOPICS.global : _ref$topic,
      _ref$id = _ref.id,
      id = _ref$id === void 0 ? (0, _utils.generateHashId)(_defaultSettings.DEFAULT_UUID_COUNT) : _ref$id,
      options = (0, _objectWithoutProperties2["default"])(_ref, ["message", "type", "topic", "id"]);
  return _objectSpread({}, options, {
    id: id,
    message: message,
    type: type,
    topic: topic
  });
}
/**
 * Creates an error notification
 * @param options
 * @returns {{topic, id, message, type: (null|number)}}
 */


var errorNotification = function errorNotification(options) {
  return _objectSpread({}, createNotification(options), {
    type: _defaultSettings.DEFAULT_NOTIFICATION_TYPES.error
  });
};
/**
 * Creates a success notification
 * @param options
 * @returns {{topic, id, message, type: null}}
 */


exports.errorNotification = errorNotification;

var successNotification = function successNotification(options) {
  return _objectSpread({}, createNotification(options), {
    type: _defaultSettings.DEFAULT_NOTIFICATION_TYPES.success
  });
};

exports.successNotification = successNotification;

var exportImageError = function exportImageError(options) {
  return errorNotification(_objectSpread({}, options, {
    topic: _defaultSettings.DEFAULT_NOTIFICATION_TOPICS.global,
    message: "Failed to export image, please take a screenshot of the javascript console, report the with [this link](".concat(_userGuides.GITHUB_BUG_REPORT, ") ")
  }));
};

exports.exportImageError = exportImageError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9ub3RpZmljYXRpb25zLXV0aWxzLmpzIl0sIm5hbWVzIjpbImNyZWF0ZU5vdGlmaWNhdGlvbiIsIm1lc3NhZ2UiLCJERUZBVUxUX05PVElGSUNBVElPTl9NRVNTQUdFIiwidHlwZSIsIkRFRkFVTFRfTk9USUZJQ0FUSU9OX1RZUEVTIiwiaW5mbyIsInRvcGljIiwiREVGQVVMVF9OT1RJRklDQVRJT05fVE9QSUNTIiwiZ2xvYmFsIiwiaWQiLCJERUZBVUxUX1VVSURfQ09VTlQiLCJvcHRpb25zIiwiZXJyb3JOb3RpZmljYXRpb24iLCJlcnJvciIsInN1Y2Nlc3NOb3RpZmljYXRpb24iLCJzdWNjZXNzIiwiZXhwb3J0SW1hZ2VFcnJvciIsIkdJVEhVQl9CVUdfUkVQT1JUIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQW9CQTs7QUFFQTs7QUFPQTs7Ozs7O0FBRUE7Ozs7Ozs7OztBQVNPLFNBQVNBLGtCQUFULE9BTUo7QUFBQSwwQkFMREMsT0FLQztBQUFBLE1BTERBLE9BS0MsNkJBTFNDLDZDQUtUO0FBQUEsdUJBSkRDLElBSUM7QUFBQSxNQUpEQSxJQUlDLDBCQUpNQyw0Q0FBMkJDLElBSWpDO0FBQUEsd0JBSERDLEtBR0M7QUFBQSxNQUhEQSxLQUdDLDJCQUhPQyw2Q0FBNEJDLE1BR25DO0FBQUEscUJBRkRDLEVBRUM7QUFBQSxNQUZEQSxFQUVDLHdCQUZJLDJCQUFlQyxtQ0FBZixDQUVKO0FBQUEsTUFERUMsT0FDRjtBQUNELDJCQUNLQSxPQURMO0FBRUVGLElBQUFBLEVBQUUsRUFBRkEsRUFGRjtBQUdFUixJQUFBQSxPQUFPLEVBQVBBLE9BSEY7QUFJRUUsSUFBQUEsSUFBSSxFQUFKQSxJQUpGO0FBS0VHLElBQUFBLEtBQUssRUFBTEE7QUFMRjtBQU9EO0FBRUQ7Ozs7Ozs7QUFLTyxJQUFNTSxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLENBQUFELE9BQU87QUFBQSwyQkFDbkNYLGtCQUFrQixDQUFDVyxPQUFELENBRGlCO0FBRXRDUixJQUFBQSxJQUFJLEVBQUVDLDRDQUEyQlM7QUFGSztBQUFBLENBQWpDO0FBS1A7Ozs7Ozs7OztBQUtPLElBQU1DLG1CQUFtQixHQUFHLFNBQXRCQSxtQkFBc0IsQ0FBQUgsT0FBTztBQUFBLDJCQUNyQ1gsa0JBQWtCLENBQUNXLE9BQUQsQ0FEbUI7QUFFeENSLElBQUFBLElBQUksRUFBRUMsNENBQTJCVztBQUZPO0FBQUEsQ0FBbkM7Ozs7QUFLQSxJQUFNQyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQUFMLE9BQU87QUFBQSxTQUNyQ0MsaUJBQWlCLG1CQUNaRCxPQURZO0FBRWZMLElBQUFBLEtBQUssRUFBRUMsNkNBQTRCQyxNQUZwQjtBQUdmUCxJQUFBQSxPQUFPLG9IQUE2R2dCLDZCQUE3RztBQUhRLEtBRG9CO0FBQUEsQ0FBaEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTkgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQge2dlbmVyYXRlSGFzaElkfSBmcm9tICcuL3V0aWxzJztcblxuaW1wb3J0IHtcbiAgREVGQVVMVF9OT1RJRklDQVRJT05fTUVTU0FHRSxcbiAgREVGQVVMVF9OT1RJRklDQVRJT05fVE9QSUNTLFxuICBERUZBVUxUX05PVElGSUNBVElPTl9UWVBFUyxcbiAgREVGQVVMVF9VVUlEX0NPVU5UXG59IGZyb20gJ2NvbnN0YW50cy9kZWZhdWx0LXNldHRpbmdzJztcblxuaW1wb3J0IHtHSVRIVUJfQlVHX1JFUE9SVH0gZnJvbSAnY29uc3RhbnRzL3VzZXItZ3VpZGVzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbm90b2ZpY2F0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIE1lc3NhZ2UgdG8gZGlzcGxheSBkdXJpbmcgdGhlIG5vdGlmaWNhdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IFt0eXBlXSAtIFRoZSB0eXBlIG9mIG1lc3NhZ2UuIE9uZSBvZiBERUZBVUxUX05PVElGSUNBVElPTl9UWVBFU1xuICogQHBhcmFtIHtzdHJpbmd9IFt0b3BpY10gLSBUaGUgdG9waWMgdGhlIG5vdGlmaWNhdGlvbiBiZWxvbmdzIHRvLiBPbmUgb2YgREVGQVVMVF9OT1RJRklDQVRJT05fVE9QSUNTXG4gKiBAcGFyYW0ge3N0cmluZ30gW2lkXSBvcHRpb25hbCBpZCBmb3Igbm90aWZpY2F0aW9uLiBJZiBub3QgcHJvdmlkZWQgaXQgd2lsbCBiZSBnZW5lcmF0ZWQgYnkgdGhlIG1ldGhvZFxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIEV4dHJhIHBhcmFtZXRlcnMgdG8gc3RvcmUgYXMgcGFydCBvZiBodGUgbm90aWZpY2F0aW9uXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTm90aWZpY2F0aW9uKHtcbiAgbWVzc2FnZSA9IERFRkFVTFRfTk9USUZJQ0FUSU9OX01FU1NBR0UsXG4gIHR5cGUgPSBERUZBVUxUX05PVElGSUNBVElPTl9UWVBFUy5pbmZvLFxuICB0b3BpYyA9IERFRkFVTFRfTk9USUZJQ0FUSU9OX1RPUElDUy5nbG9iYWwsXG4gIGlkID0gZ2VuZXJhdGVIYXNoSWQoREVGQVVMVF9VVUlEX0NPVU5UKSxcbiAgLi4ub3B0aW9uc1xufSkge1xuICByZXR1cm4ge1xuICAgIC4uLm9wdGlvbnMsXG4gICAgaWQsXG4gICAgbWVzc2FnZSxcbiAgICB0eXBlLFxuICAgIHRvcGljXG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBlcnJvciBub3RpZmljYXRpb25cbiAqIEBwYXJhbSBvcHRpb25zXG4gKiBAcmV0dXJucyB7e3RvcGljLCBpZCwgbWVzc2FnZSwgdHlwZTogKG51bGx8bnVtYmVyKX19XG4gKi9cbmV4cG9ydCBjb25zdCBlcnJvck5vdGlmaWNhdGlvbiA9IG9wdGlvbnMgPT4gKHtcbiAgLi4uY3JlYXRlTm90aWZpY2F0aW9uKG9wdGlvbnMpLFxuICB0eXBlOiBERUZBVUxUX05PVElGSUNBVElPTl9UWVBFUy5lcnJvclxufSk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN1Y2Nlc3Mgbm90aWZpY2F0aW9uXG4gKiBAcGFyYW0gb3B0aW9uc1xuICogQHJldHVybnMge3t0b3BpYywgaWQsIG1lc3NhZ2UsIHR5cGU6IG51bGx9fVxuICovXG5leHBvcnQgY29uc3Qgc3VjY2Vzc05vdGlmaWNhdGlvbiA9IG9wdGlvbnMgPT4gKHtcbiAgLi4uY3JlYXRlTm90aWZpY2F0aW9uKG9wdGlvbnMpLFxuICB0eXBlOiBERUZBVUxUX05PVElGSUNBVElPTl9UWVBFUy5zdWNjZXNzXG59KTtcblxuZXhwb3J0IGNvbnN0IGV4cG9ydEltYWdlRXJyb3IgPSBvcHRpb25zID0+XG4gIGVycm9yTm90aWZpY2F0aW9uKHtcbiAgICAuLi5vcHRpb25zLFxuICAgIHRvcGljOiBERUZBVUxUX05PVElGSUNBVElPTl9UT1BJQ1MuZ2xvYmFsLFxuICAgIG1lc3NhZ2U6IGBGYWlsZWQgdG8gZXhwb3J0IGltYWdlLCBwbGVhc2UgdGFrZSBhIHNjcmVlbnNob3Qgb2YgdGhlIGphdmFzY3JpcHQgY29uc29sZSwgcmVwb3J0IHRoZSB3aXRoIFt0aGlzIGxpbmtdKCR7R0lUSFVCX0JVR19SRVBPUlR9KSBgXG4gIH0pO1xuIl19