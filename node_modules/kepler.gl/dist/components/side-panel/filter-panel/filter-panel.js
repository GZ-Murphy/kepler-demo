"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reselect = require("reselect");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _panelHeaderAction = _interopRequireDefault(require("../panel-header-action"));

var _fieldSelector = _interopRequireDefault(require("../../common/field-selector"));

var _icons = require("../../common/icons");

var _sourceDataSelector = _interopRequireDefault(require("../common/source-data-selector"));

var _styledComponents2 = require("../../common/styled-components");

var _singleSelectFilter = _interopRequireDefault(require("../../filters/single-select-filter"));

var _multiSelectFilter = _interopRequireDefault(require("../../filters/multi-select-filter"));

var _timeRangeFilter = _interopRequireDefault(require("../../filters/time-range-filter"));

var _rangeFilter = _interopRequireDefault(require("../../filters/range-filter"));

var _filterUtils = require("../../../utils/filter-utils");

var _defaultSettings = require("../../../constants/default-settings");

function _templateObject3() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  background-color: ", ";\n  padding: 12px;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  cursor: pointer;\n  padding: 10px 12px;\n\n  .field-selector {\n    width: calc(100% - 58px);\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  margin-bottom: 12px;\n  border-radius: 1px;\n\n  .filter-panel__filter {\n    margin-top: 24px;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var StyledFilterPanel = _styledComponents["default"].div(_templateObject());

var StyledFilterHeader = (0, _styledComponents["default"])(_styledComponents2.StyledPanelHeader)(_templateObject2());

var StyledFilterContent = _styledComponents["default"].div(_templateObject3(), function (props) {
  return props.theme.panelBackground;
});

FilterPanelFactory.deps = [_sourceDataSelector["default"], _singleSelectFilter["default"], _multiSelectFilter["default"], _timeRangeFilter["default"], _rangeFilter["default"]];

function FilterPanelFactory(SourceDataSelector, SingleSelectFilter, MultiSelectFilter, TimeRangeFilter, RangeFilter) {
  var _class, _temp;

  var FilterComponents = {
    SingleSelectFilter: SingleSelectFilter,
    MultiSelectFilter: MultiSelectFilter,
    TimeRangeFilter: TimeRangeFilter,
    RangeFilter: RangeFilter
  };
  return _temp = _class =
  /*#__PURE__*/
  function (_Component) {
    (0, _inherits2["default"])(FilterPanel, _Component);

    function FilterPanel() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2["default"])(this, FilterPanel);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(FilterPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "fieldsSelector", function (props) {
        return props.filter.dataId && props.datasets[props.filter.dataId].fields || [];
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "filterSelector", function (props) {
        return props.filters;
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "nameSelector", function (props) {
        return props.filter.name;
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "dataIdSelector", function (props) {
        return props.filter.dataId;
      });
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "availableFieldsSelector", (0, _reselect.createSelector)(_this.fieldsSelector, _this.filterSelector, _this.nameSelector, _this.dataIdSelector, function (fields, filters, name, dataId) {
        return fields.filter(function (f) {
          return f.type && f.type !== _defaultSettings.ALL_FIELD_TYPES.geojson && (f.name === name || !filters.find(function (d) {
            return d.name === f.name && d.dataId === dataId;
          }));
        });
      }));
      return _this;
    }

    (0, _createClass2["default"])(FilterPanel, [{
      key: "render",
      value: function render() {
        var _this$props = this.props,
            datasets = _this$props.datasets,
            enlargeFilter = _this$props.enlargeFilter,
            filter = _this$props.filter,
            idx = _this$props.idx,
            isAnyFilterAnimating = _this$props.isAnyFilterAnimating,
            removeFilter = _this$props.removeFilter,
            _setFilter = _this$props.setFilter,
            toggleAnimation = _this$props.toggleAnimation;
        var name = filter.name,
            enlarged = filter.enlarged,
            type = filter.type,
            dataId = filter.dataId;
        var FilterComponent = type && FilterComponents[_filterUtils.FILTER_COMPONENTS[type]];
        var allAvailableFields = this.availableFieldsSelector(this.props);
        return _react["default"].createElement(StyledFilterPanel, {
          className: "filter-panel"
        }, _react["default"].createElement(StyledFilterHeader, {
          className: "filter-panel__header",
          labelRCGColorValues: datasets[dataId].color
        }, _react["default"].createElement(_fieldSelector["default"], {
          inputTheme: "secondary",
          fields: allAvailableFields,
          value: name,
          erasable: false,
          onSelect: function onSelect(value) {
            return _setFilter(idx, 'name', value.name);
          }
        }), _react["default"].createElement(_panelHeaderAction["default"], {
          id: filter.id,
          tooltip: "delete",
          tooltipType: "error",
          onClick: removeFilter,
          hoverColor: 'errorColor',
          IconComponent: _icons.Trash
        }), type === _filterUtils.FILTER_TYPES.timeRange && _react["default"].createElement(_panelHeaderAction["default"], {
          id: filter.id,
          onClick: enlargeFilter,
          tooltip: "Time Playback",
          IconComponent: _icons.Clock,
          active: enlarged
        })), _react["default"].createElement(StyledFilterContent, {
          className: "filter-panel__content"
        }, Object.keys(datasets).length > 1 && _react["default"].createElement(SourceDataSelector, {
          inputTheme: "secondary",
          datasets: datasets,
          disabled: filter.freeze,
          dataId: filter.dataId,
          onSelect: function onSelect(value) {
            return _setFilter(idx, 'dataId', value);
          }
        }), type && !enlarged && _react["default"].createElement("div", {
          className: "filter-panel__filter"
        }, _react["default"].createElement(FilterComponent, {
          filter: filter,
          idx: idx,
          isAnyFilterAnimating: isAnyFilterAnimating,
          toggleAnimation: toggleAnimation,
          setFilter: function setFilter(value) {
            return _setFilter(idx, 'value', value);
          }
        }))));
      }
    }]);
    return FilterPanel;
  }(_react.Component), (0, _defineProperty2["default"])(_class, "propTypes", {
    idx: _propTypes["default"].number,
    filters: _propTypes["default"].arrayOf(_propTypes["default"].any).isRequired,
    filter: _propTypes["default"].object.isRequired,
    setFilter: _propTypes["default"].func.isRequired,
    removeFilter: _propTypes["default"].func.isRequired,
    enlargeFilter: _propTypes["default"].func.isRequired,
    toggleAnimation: _propTypes["default"].func.isRequired,
    datasets: _propTypes["default"].object,
    showDatasetTable: _propTypes["default"].func,
    isAnyFilterAnimating: _propTypes["default"].bool
  }), _temp;
}

var _default = FilterPanelFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,